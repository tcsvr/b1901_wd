-- phpMyAdmin SQL Dump
-- version phpStudy 2014
-- http://www.phpmyadmin.net
--
-- 主机: localhost
-- 生成日期: 2019 年 04 月 27 日 00:24
-- 服务器版本: 5.5.53
-- PHP 版本: 5.4.45

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- 数据库: `b1901_wendo`
--

-- --------------------------------------------------------

--
-- 表的结构 `wd_admin`
--

CREATE TABLE IF NOT EXISTS `wd_admin` (
  `admin_id` int(11) NOT NULL AUTO_INCREMENT,
  `admin_username` varchar(30) NOT NULL,
  `admin_real` varchar(10) NOT NULL,
  `admin_password` varchar(32) NOT NULL,
  `lasttime` varchar(30) NOT NULL,
  `lastip` varchar(20) NOT NULL,
  `verify` varchar(32) NOT NULL,
  PRIMARY KEY (`admin_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COMMENT='管理员表' AUTO_INCREMENT=10 ;

--
-- 转存表中的数据 `wd_admin`
--

INSERT INTO `wd_admin` (`admin_id`, `admin_username`, `admin_real`, `admin_password`, `lasttime`, `lastip`, `verify`) VALUES
(1, 'admin', '', '28c99e5edd76455e289b67eba31a866d', '1556068742', '127.0.0.1', 'baa4c23d81e0155072419a147777d5ab'),
(2, 'admin1', '', '67ecba42e37d6e9ee57f4d222a8e4897', '1556068742', '127.0.0.1', '08cb7889cf136bb29282de1da0d29330');

-- --------------------------------------------------------

--
-- 表的结构 `wd_article`
--

CREATE TABLE IF NOT EXISTS `wd_article` (
  `a_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `a_title` varchar(50) NOT NULL COMMENT '标题',
  `a_content` text NOT NULL COMMENT '内容',
  PRIMARY KEY (`a_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COMMENT='文章表' AUTO_INCREMENT=3 ;

--
-- 转存表中的数据 `wd_article`
--

INSERT INTO `wd_article` (`a_id`, `a_title`, `a_content`) VALUES
(1, '关于我们', '<p>文豆网络，是一家提供互联网服务的高科技集团公司，集策划、设计、前端优化、研发、测试、系统运维、网站推广、运营、团队外包及互联网人才培养为一体的成熟业务体系。总部位于广州市客村立交财智大厦28楼。</p><p>\r\n			</p><p>文豆主要提供高品质网站建设方案，电子商务平台解决方案，移动端应用开发方案（基于Android、iOS APP及移动端网站），微应用、微商城、微官网、微互动营销解决方案，企业信息化解决方案（OA、CRM），以及PHP网站开发、Java开发、UI设计、淘宝美工人才培养服务，人才外包服务，高端IT人才猎头服务。</p><p>\r\n			<img src="images/about_01.jpg" alt=""/>\r\n			</p><dl>\r\n				<dt>公司的运营理念是：</dt>\r\n				<dd>携手共进，共赢天下</dd>\r\n				<dd>以结果为导向。树立好工作目标，监督过程，实现理想效果。</dd>\r\n				<dd>打造一流的团队，创造一流的服务，成为一流的行业标志。</dd>\r\n			</dl><p>\r\n			<img src="images/about_02.jpg" alt=""/>\r\n			</p><dl>\r\n				<dt>员工职业发展：</dt>\r\n				<dd>我们非常清楚职业发展计划对于每个员工的重要性。公司对人员的要求，更加看重心态，只要愿意成为文豆的一份子，公司都会让员工充分展示自己，发挥他们的潜力、才干和热情，在文豆走向职业的成功。</dd>\r\n			</dl><p>\r\n			<img src="images/about_03.jpg" alt=""/>\r\n			</p><dl>\r\n				<dt>服务理念：</dt>\r\n				<dd>产品是核心，服务是灵魂，服务是命脉。</dd>\r\n				<dd>走在行业的前端，创造新的至高点。</dd>\r\n			</dl><p>\r\n			<img src="images/about_04.jpg" alt=""/></p>'),
(2, '联系我们', '<ul>\r\n					<li>广州总部：广州海珠区广州大道南448号财智大厦28楼</li>\r\n					<li>深圳总部：深圳福田区福华路322号文蔚大厦4楼</li>\r\n					<li>广州番禺分部：广州市番禺区市桥光明北路12号锦绣华庭三座404</li>\r\n					<li>广州增城分部：广州增城区荔城花园东门32号</li>\r\n					<li>广州大学城分部：广州大学城中七路大学时光首层</li>\r\n					<li>广州白云分部：广州市白云区从云路839号利都商务中心B911</li>\r\n					<li>惠州分部：惠州市惠城区江北三新南路3号名流公馆10层05室</li>\r\n					<li>佛山分部:佛山市南海区桂城南新一路16号首层</li>\r\n					<li>东莞分部：东莞市莞城区汇峰中心E区1002室</li>\r\n					<li>肇庆分部：肇庆市端州区端州五路18号大楼四楼长江教育(市人才大厦前)</li>\r\n					<li>集团广告创意部：广州市荔湾区芳村培真路2号之2鹤展创意园A栋2楼</li>\r\n				</ul>\r\n				<ol>\r\n					<li>广州总部：440-888-8888 <span>深圳总部：0755-66691037</span></li>\r\n					<li>Msn/E-mail:seven@wengdo.com</li>\r\n				</ol>');

-- --------------------------------------------------------

--
-- 表的结构 `wd_banner`
--

CREATE TABLE IF NOT EXISTS `wd_banner` (
  `b_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `b_img` varchar(64) NOT NULL COMMENT '图片',
  `b_thumb` varchar(100) NOT NULL,
  `b_isshow` tinyint(4) NOT NULL COMMENT '是否显示',
  PRIMARY KEY (`b_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COMMENT='广告图' AUTO_INCREMENT=7 ;

--
-- 转存表中的数据 `wd_banner`
--

INSERT INTO `wd_banner` (`b_id`, `b_img`, `b_thumb`, `b_isshow`) VALUES
(1, '2019/04/15558970747894.jpg', '2019-04/22/15558970747894.jpg', 1),
(2, '2019/04/155589708479400.jpg', '2019-04/22/155589708479400.jpg', 1),
(3, '2019/04/155589709143530.jpg', '2019-04/22/155589709143530.jpg', 1),
(4, '2019/04/155589709994973.jpg', '2019-04/22/155589709994973.jpg', 1);

-- --------------------------------------------------------

--
-- 表的结构 `wd_case`
--

CREATE TABLE IF NOT EXISTS `wd_case` (
  `c_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `c_title` varchar(32) DEFAULT NULL COMMENT '标题',
  `c_img` varchar(64) DEFAULT NULL COMMENT '图片',
  `c_thumb` varchar(100) NOT NULL,
  `c_detail` text COMMENT '详情',
  `c_isshow` tinyint(4) DEFAULT NULL COMMENT '是否显示',
  `ca_id` int(11) DEFAULT NULL COMMENT '案例分类',
  PRIMARY KEY (`c_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COMMENT='案例表' AUTO_INCREMENT=70 ;

--
-- 转存表中的数据 `wd_case`
--

INSERT INTO `wd_case` (`c_id`, `c_title`, `c_img`, `c_thumb`, `c_detail`, `c_isshow`, `ca_id`) VALUES
(1, 'SIMIFLY', '2019/04/155589727177230.jpg', '2019-04/22/155589727177230.jpg', '<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;详情 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>', 1, 1),
(2, 'simifly---Home', '2019/04/155589726365295.jpg', '2019-04/22/155589726365295.jpg', '<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;详情 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>', 1, 1),
(4, 'simifly---Home', '2019/04/155589725237432.jpg', '2019-04/22/155589725237432.jpg', '<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;详情 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>', 1, 1),
(5, 'simifly---Home', '2019/04/155589724496798.jpg', '2019-04/22/155589724496798.jpg', '<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;详情 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>', 1, 1),
(6, 'simifly---Home', '2019/04/155589723716912.jpg', '2019-04/22/155589723716912.jpg', '<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;详情 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>', 1, 1),
(7, 'simifly---Home', '2019/04/155589722872079.jpg', '2019-04/22/155589722872079.jpg', '<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;详情 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>', 1, 1),
(8, 'simifly---Home', '2019/04/155589721914846.jpg', '2019-04/22/155589721914846.jpg', '<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;详情 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>', 1, 1),
(9, 'simifly---Home', '2019/04/155589721110894.jpg', '2019-04/22/155589721110894.jpg', '<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;详情 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>', 1, 1),
(10, 'simifly---Home', '2019/04/155589720360147.jpg', '2019-04/22/155589720360147.jpg', '<p>详情</p>', 1, 1),
(11, 'simifly---Home', '2019/04/155589737364218.jpg', '2019-04/22/155589737364218.jpg', '<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;详情 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>', 1, 2),
(12, 'simifly---Home', '2019/04/155589736518273.jpg', '2019-04/22/155589736518273.jpg', '<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;详情 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>', 1, 2),
(13, 'simifly---Home', '2019/04/155589735537930.jpg', '2019-04/22/155589735537930.jpg', '<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;详情 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>', 1, 2),
(14, 'simifly---Home', '2019/04/155589734779840.jpg', '2019-04/22/155589734779840.jpg', '<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;详情 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>', 1, 2),
(15, 'simifly---Home', '2019/04/155589734047766.jpg', '2019-04/22/155589734047766.jpg', '<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;详情 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>', 1, 2),
(16, 'simifly---Home', '2019/04/155589732335128.jpg', '2019-04/22/155589732335128.jpg', '<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;详情 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>', 1, 2),
(17, 'simifly---Home', '2019/04/155589731563839.jpg', '2019-04/22/155589731563839.jpg', '<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;详情 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>', 1, 2),
(18, 'simifly---Home', '2019/04/155589730675555.jpg', '2019-04/22/155589730675555.jpg', '<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;详情 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>', 1, 2),
(19, 'simifly---Home', '2019/04/155589729775247.jpg', '2019-04/22/155589729775247.jpg', '<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;详情 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>', 1, 2),
(20, 'simifly---Home', '2019/04/15558972911147.jpg', '2019-04/22/15558972911147.jpg', '<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;详情 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>', 1, 2),
(21, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 3),
(22, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 3),
(23, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 3),
(24, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 3),
(25, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 3),
(26, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 3),
(27, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 3),
(28, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 3),
(29, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 3),
(30, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 3),
(31, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 4),
(32, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 4),
(33, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 4),
(34, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 4),
(35, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 4),
(36, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 4),
(37, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 4),
(38, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 4),
(39, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 4),
(40, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 4),
(41, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 5),
(42, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 5),
(43, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 5),
(44, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 5),
(45, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 5),
(46, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 5),
(47, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 5),
(48, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 5),
(49, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 5),
(50, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 5),
(51, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 5),
(52, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 5),
(53, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 5),
(54, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 5),
(55, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 5),
(56, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 5),
(57, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 5),
(58, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 5),
(59, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 5),
(60, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 5),
(61, 'simifly---Home', 'images/case_01.jpg', '', '详情', 1, 5),
(62, 'SIMIFLY', 'images/case_01.jpg', '', '详情', 1, 5),
(69, '444', '2019/04/155589719225750.jpg', '2019-04/22/155589719225750.jpg', '<p>4</p>', 1, 1);

-- --------------------------------------------------------

--
-- 表的结构 `wd_case_category`
--

CREATE TABLE IF NOT EXISTS `wd_case_category` (
  `ca_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `ca_name` varchar(10) DEFAULT NULL COMMENT '案例名称',
  PRIMARY KEY (`ca_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COMMENT='案例分类表' AUTO_INCREMENT=10 ;

--
-- 转存表中的数据 `wd_case_category`
--

INSERT INTO `wd_case_category` (`ca_id`, `ca_name`) VALUES
(1, '企业品牌网站'),
(2, '电子商务网站'),
(3, '门户型网站'),
(4, '管理系统'),
(5, '团购');

-- --------------------------------------------------------

--
-- 表的结构 `wd_message`
--

CREATE TABLE IF NOT EXISTS `wd_message` (
  `m_id` int(11) NOT NULL AUTO_INCREMENT,
  `m_name` varchar(30) NOT NULL,
  `m_email` varchar(50) NOT NULL,
  `m_phone` varchar(20) NOT NULL,
  `m_content` text NOT NULL,
  `m_time` varchar(20) NOT NULL,
  `u_id` int(11) NOT NULL,
  PRIMARY KEY (`m_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COMMENT='留言表' AUTO_INCREMENT=9 ;

--
-- 转存表中的数据 `wd_message`
--

INSERT INTO `wd_message` (`m_id`, `m_name`, `m_email`, `m_phone`, `m_content`, `m_time`, `u_id`) VALUES
(1, '', 'asd', '123', '\r\n	asd				', '1556188597', 0),
(2, '', 'asd', '123', '\r\n	asd				', '1556188617', 0),
(5, '', 'asd', '123', 'asd', '1556189239', 25),
(7, '', 'asd', '123', 'asd', '1556191143', 25),
(8, 'ssss', 'asd', '123', 'sdas', '1556191362', 25);

-- --------------------------------------------------------

--
-- 表的结构 `wd_nav`
--

CREATE TABLE IF NOT EXISTS `wd_nav` (
  `n_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `n_name` varchar(10) DEFAULT NULL COMMENT '导航名称',
  `n_link` varchar(64) DEFAULT NULL COMMENT '导航链接',
  `n_isshow` tinyint(4) DEFAULT NULL COMMENT '是否显示',
  PRIMARY KEY (`n_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COMMENT='导航表' AUTO_INCREMENT=15 ;

--
-- 转存表中的数据 `wd_nav`
--

INSERT INTO `wd_nav` (`n_id`, `n_name`, `n_link`, `n_isshow`) VALUES
(1, '网站首页', 'index.php', 1),
(2, '案例展示', 'case_list.php', 1),
(3, '关于我们', 'about.php', 1),
(4, '资讯动态', 'news_list.php', 1),
(5, '联系我们', 'contact.php', 1),
(12, '登录', 'login.php', 0),
(13, '注册', 'register.php', 0),
(14, '用户中心', 'user_info.php', 0);

-- --------------------------------------------------------

--
-- 表的结构 `wd_news`
--

CREATE TABLE IF NOT EXISTS `wd_news` (
  `n_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `n_title` varchar(32) NOT NULL COMMENT '标题',
  `n_detail` text NOT NULL COMMENT '详情',
  `n_img` varchar(64) NOT NULL COMMENT '图片',
  `n_thumb` varchar(100) NOT NULL,
  `n_time` varchar(12) NOT NULL COMMENT '时间',
  PRIMARY KEY (`n_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COMMENT='新闻资讯表' AUTO_INCREMENT=12 ;

--
-- 转存表中的数据 `wd_news`
--

INSERT INTO `wd_news` (`n_id`, `n_title`, `n_detail`, `n_img`, `n_thumb`, `n_time`) VALUES
(1, 'PHP系统设计与云架构', '<p>1这几年我比较少写 PHP 了.</p><p>\r\n			</p><p>有阵子很迷它, 但是因为工作关系, 把较多的时间花在网络封包和数据库的分析工作上.而且因为年记较大了所以也很难找到写程序的工作多半都在做工程师的 “工头”对于这几年 PHP 的变化我来不及参与.在这裡收集这几年对 PHP 的变化, 写篇心得过过本人自己的乾隐:回顾您以往的职业生涯, 您有好好的管理您写的 CODE 吗?还是每次都写到需求超级肥大了, 才延伸出一大堆的程序码管理问题.在这裡本人设计一个开发框架的架构, 让你的程序更简洁而且让你的程序更有条有理的被应用.当然这些架构教程我己经简化很多, 如果放入太多的设计反而会得到反效果.如果您是比较重口味的 PHP 设计者, 先说声报歉了.如果您常为了需求肥大难以管理你的程序,这篇文章对您来说会是个值得参考的文章, 至少它有著我十几年的需求开发经验.</p><p>\r\n			</p><h3>一.常见的 PHP 应用的架构:</h3><p>\r\n			<img src="images/detailed_01.png" alt=""/>\r\n			</p><p>在往下教程下去前, 本人先定义一些名词, 以方便大家接下去阅读教程.</p><p>\r\n			</p><p>DB :这一块不用多介绍, 我相信大家对 DB 的经验独道, 我们直接跳过去.</p><p>\r\n			</p><p>Access Layer :这一块全部都是放一些 Access Logic 在裡头, 主要的工作是负责跟 DB 还有 MEMCACHE 沟通, 你可以使用现成的开发框架达成这一层的目地, 也可以自己开发.但是这些逻辑建议您都保留在这一层.MEMCACHE :这一块主要是做为分散式架构的存取层, 大家有没有注意到一件事?它是走 TCP 11211 PORT .它可以用在什麽地方?</p><p>\r\n			</p><p>a.让你可以把从 DB 的资料捞到快取一份到 MEMCACHE ,来减轻资料库的工作负担, 这在大型而且流量很高的系统上, 它辨演很重要的角色就是可以减轻 DB 的工作量.我们这裡不多介绍 Memcahe 的使用及方式, 您可以多参考官方网站或其它网络上的教程.</p><p>\r\n			</p><p>b.有一些不用储存用完就不要的资料, 也可以利用 memcache 直接存取不用再交给 DB 去处理.</p><p>\r\n			</p><p>c.注意一件事:在过去裡我的下属们在使用它时常会犯一个错就是烂用 Memcache ,memcache 本身是一个 TCP 的服务在单台 linux 伺服器下最多只能使用1024个请求,当然你可以用 ulimit 提高它, 但是请先了解它的本质用对地方.它本身并不能做为程序本身加快程序效能的工具, 但是它是一个可以做到分散式的存取架构, 并且可以减轻 DB 负担的工具, 的好用工具.所以在使用它时要选对时机, 千万不要烂用.</p><p>\r\n			</p><p>Access Layer :这一层的工作主要是存取资料层的逻辑, 我将会2.会有更详细的说明.</p><p>\r\n			</p><p>Content Logic Layer :这一层的工作主要是负责处理存取层从 资料层要来的资料的逻辑, 我将会3.会有更详细的说明.</p><p>\r\n			</p><p>Presentation Layer :这一层的工作意义重大, 它主要是标准化 Presentation Logic 与 Content Logic Layer 沟通的标准,让你的画面逻辑不会愈来愈肥大及复杂, 我将会4.会有更详细的说明.</p><p>\r\n			</p><p>Presentation Logic Layer :这一层的工作是做为让 你的画面逻辑可以采用标准化的介面来与伺服器沟通, 如果 Presentation Layer 标准化了, 你的画面逻辑的可重覆利用性就会更高及有弹性, 我将会5.会有更详细的说明.</p><p>\r\n			</p><p>Client Layer :这一层就是我们平时便用的浏览器,云端服务等等的应用, 相信大家非常了解这一层可以做到的事, 所以我们就不多介绍 Client Layer 了.</p><p>\r\n			</p><h3>二.功能方块介绍:</h3><p>\r\n			</p><p>到这裡我们必需要将图裡的方块切的更细让大家理解请耐心的看完下一张图:</p><p>\r\n			<img src="images/detailed_02.png" alt=""/>\r\n			</p><h4>1. 数据库逻辑层 :</h4><p>\r\n			</p><p>Access Logic Layer 主要的工作是做为与 DB 和 Content Logic 沟通的区块, 在这裡本人建议大家在设计物件库或函式库前, 先参考这个架构.</p><p>\r\n			</p><p>把所有跟资料库存取的逻辑全部包装在这个区块下, 例如大家在设计DB时最爱用 Factory 来做 DB 的切换, 同时把这些逻辑全部整到这一层让您的程序更有层次更好管理.</p><p>\r\n			</p><p>看到这裡大家一定对一些使用 Factory 设计的 OOP DB 存取函式库不漠生.</p><p>\r\n			</p><p>这时我要介绍大家一个名词, Object-relational_mapping :</p><p>\r\n			</p><p>http://en.wikipedia.org/wiki/Object-relational_mapping</p><p>\r\n			</p><p>什麽地方有 ORM ?就是大家常用的.</p><p>\r\n			</p><p>CAKE PHP</p><p>\r\n			</p><p>ZEND FRAMEWORK.</p><p>\r\n			</p><p>Doctrine</p><p>\r\n			</p><p>Propel</p><p>\r\n			</p><p>CoughPHP</p><p>\r\n			</p><p>Symphony</p><p>\r\n			</p><p>当然…您也可以自己写, 重点是, 要懂得怎麽有效率的去管理你的存取层的逻辑.</p><p>\r\n			</p><p>而一但定义了这一层.</p><p>\r\n			</p><p>强烈建议在接下来的 Content Logic Layer , Presentation Logic Layer 严格禁止其它逻辑层的逻辑跳过它来存取资料库.</p><p>\r\n			</p><p>这麽做有什麽好处? :</p><p>\r\n			</p><p>1.确保其它工作者不会写出不良的DB存取逻辑造成你的系统不好维护</p><p>\r\n			</p><p>2.你可以不用再担心会有严重的存取层 BUG</p><p>\r\n			</p><p>3.它在使用上变的更安全, 不会让你的资料库暴露在 Content &amp; Presentation Logic Layer ,让你的 DB 有一定程度的保障.</p><p>\r\n			</p><p>4.如果你的 ORM TOOL 有提供管理器, 你还可以把所有的 SQL 语法倒出来检示有没有什麽存取过重的语法.</p><p>\r\n			</p><p>5.最重要的!!你可以把常用的存取层资料跟 MEMCACHE 做有效的资源管理, 让你的 DB 的资源更有效的被利用!!</p><p>\r\n			</p><p>补充说明:</p><p>\r\n			</p><p>Access MYSQL :资料库的新增改查逻辑全部放在这.</p><p>\r\n			</p><p>Access Memcache :与 MEMCACHE 存取的新增改查逻辑全部放在这.</p><p>\r\n			</p><p>Access NOSQL :现在最流行的 NOSQL ,你可以分别的去包装你要的逻辑在这裡面.</p><p>\r\n			</p><p>Other :如果你有别的使用资料存取的逻辑, 可以参造上述的方式一一的去整理….</p><p>\r\n			</p><h4>2. 逻辑层 :</h4><p>\r\n			</p><p>这一层有什麽东西?</p><p>\r\n			</p><p>1.你们服务用的到的商业逻辑, 你可以把每个商业逻辑用 OOP 设计, 并且放在这一块, 以利日后的管理.</p><p>\r\n			</p><p>2. String Parser :</p><p>\r\n			</p><h4>为什麽在这篇教程裡我会建议您设计这块? 因为它必需满足 Presentation Layer 要求的几个素求:</h4><p>\r\n			</p><p>1.一致性高,2.可重覆利用性高, 3.跨平台性高,4.云端应用, 所以大家不要关掉文章快点看到3.怎麽让你的系统可以符合这四个素求.</p><p>\r\n			</p><h4>3.表示层:</h4><p>\r\n			</p><p>我为何在这篇教程裡, 放入了这一层的应用?</p><p>\r\n			<img src="images/detailed_03.png" alt=""/>\r\n			</p><p>这要回顾到10年前, 我入手了一本 Wrox 的 Professional PHP4.</p><p>\r\n			</p><p>这本书我印象深刻, 因为它一共有十一个作者在写: 当时看到它有一篇单元 “多层式架构开发” ,让我对整个 WEB 架构开发的视野完全打开.不过我得承认我以前很嘴贱, 常说 SMARTY TEMPLATE 是玩具.</p><p>\r\n			</p><p>PS : SMARTY TEMPLATE 采用 tpl php var 的方式来做少了这一层,常会极端的用些言语说它不好.</p><p>\r\n			</p><p>你可以参考这二本书, 会发现这一层放入这个设计会让你未来工作变的轻松很多.</p><p>\r\n			</p><p>http://www.amazon.com/Profession … homas/dp/1861006918</p><p>\r\n			</p><p>http://www.amazon.com/Profession … p;keywords=PHP4+XML</p><p>\r\n			</p><p>#回到正题-</p><p>\r\n			</p><p>这一层专门用来处理 Content Logic Layer 处理好的资料, 利用 XML , JSON 等标准化的介面语言, 来规范你的 Content Logic Layer 按照你的 Convention (规范)来吐出资料给 Presentation Logic Layer</p><p>\r\n			</p><p>a.这样做有什麽好处：</p><p>\r\n			</p><h4>1.一致性高:</h4><p>\r\n			</p><p>也因为这样, 你的 Presentation Layer 有著标准化的格式, 所以你在使用 AJAX , AS , PHP SDK 等…做画面逻辑串接时,你的画面逻辑的程序将会变的一致性很高, 因为都是参考同样的格式, 让你的画面逻辑的程序不会乱长.工程师因为熟悉相同的介面格式, 工作起来将会非常的轻松.</p><p>\r\n			</p><h4>2.可重覆利用性高:</h4><p>\r\n			</p><p>在你享受 Presentation Layer 有著标准化的格式的好处时, 你会发现,你可以把画面逻辑也整理起来重覆利用,这时你会发现你少写好多好多的程序码.例如: 换页逻辑, 表单的呈现………..等等等, 只要另外塞 CSS 进来就好了. 根本不用写什麽程序.</p><p>\r\n			</p><h4>3.跨平台性高:</h4><p>\r\n			</p><p>啥咪?还有.是的!!!大家记得 RSS 吗? RSS就是利用了 Presentation Layer 这个特性让各种平台都可以串接 BLOG 的文章内容, 让你的系统有著强大的夸平台性整合能力.</p><p>\r\n			</p><h4>4.云端应用:</h4><p>\r\n			</p><p>是的即然跨平台性高了, 也就是你完成这个需求的同时, 你所有的系统内容的呈现可以丢给任何云端平台的整合!</p><p>\r\n			</p><h4>b.使用心得：</h4><p>\r\n			</p><p>这个设计, 会让你的系统架构非常灵活, 灵活到什麽程度?</p><p>\r\n			</p><p>以往一组新增/修改/删除/换页/搜寻, 只要写完一次而且完整的从下到上每一层整合上来.\r\n \r\n			我几乎不用二次开发, 直接套用之前写好的 content Logic , Presentation Logic 就可以完成一个需求.\r\n \r\n			一天可以完工三十几组新增/修改/删除/换页/搜寻的串接, 所以我当时消耗需求的速度比起一般没有用这个设计技巧快上非常的多. \r\n			而大家心裡会有疑问, 这不就是以前 RUBY &amp; CAKE PHP 的特性吗?是的!!就这个理念!\r\n \r\n			不过有差异, 就是 CAKE PHP 在做画面逻辑时, 它并不会真的把这层切开, 而是将 MVC 裡的 V 和 C 有效化的重覆利用, 但是一但要使用云端应用和夸平台时,</p><p>\r\n			</p><p>之前写过的程序无法直接透过 Presentation Layer 拉出去给第三方平台做串接.</p><p>\r\n			</p><p>虽然省了 ORM 那一层的重覆开发, 但是 Content Layer 和 Presentation Layer 还是要在手工调整的.\r\n \r\n			而一但一调整, 就会产生, DEBUG ,开发, 稳定性, 和你又多了一堆CODE 要维护的工作….</p><p>\r\n			</p><h4>6. 表现逻辑层 :</h4><p>\r\n			</p><p>这一层讲起来轻松多了, 因为大家己经有了非常多的 AJAX , XSL , FACEBOOK SDK , IOS , ANDROID , FLASH AS 的串接经验.\r\n \r\n			没错, 这裡就是把之前辛苦定义并且做好的 Presentation Layer 吐出来的格式做应用.</p><p>\r\n			</p><p>你可以透过~HTTP , SOCKET SERVER 等等..将你的 Presentation Layer 的 JSON , XML 吐出来, 并且交给你的画面逻辑程序去串接.\r\n			这麽一来你也轻松完成了一个云端的整合介面, 让你写的 PHP 可以广泛的使用在任何不同的平台上.</p><p>\r\n			</p><h4>7. 单元测试/压力测试/集成测试:</h4><p>\r\n			</p><p>在我开发每一层的元件时, 我都会要求工程师, 做单元测试(UNIT TEST), 压力测试( Stress Test ), 整合测试( Integration Test )</p><p>\r\n			</p><p>a.单元测试(UNIT TEST): 你可以使用 PHPUNIT 或是自己写, 针对你的一个函数的进和出的测试, 并且预先写好 TEST CASE ,确保每一层的函式库都是非常稳定而且没有问题的, 来让你管理程序的品质.</p><p>\r\n			</p><p>b.压力测试(Stess TEST): 针对每一个函式库的逻辑, 在做 UNIT TEST 的同时, 将 STRESS TEST 的 TEST CASE 喂进去, 并且记录每一个函式处理 TEST 所消耗的时间.</p><p>\r\n			</p><p>c.整合测试(Integration Test): 你可以写一支程序, 做 DAILY BUILD 每天去检查所有程序设计师 COMMIT 到 SVN 的程序码是否有问题, 确保每个函式之间整合是正常的, 降低 DEBUG 的工作量.</p>', '2019/04/155589681454162.jpg', '2019-04/22/155589681454162.jpg', '1555297686'),
(2, 'Ghost 博客中文版 0.5.5 正式发布', '<p>2祝贺你成为广州市天河金领技工学校学生，学校坐落于国家第二大公共实训基地“广州开发区、萝岗区高技能人才公共实训基地”</p><p>这几年我比较少写 PHP 了.</p><p>\r\n			</p><p>有阵子很迷它, 但是因为工作关系, 把较多的时间花在网络封包和数据库的分析工作上.而且因为年记较大了所以也很难找到写程序的工作多半都在做工程师的 “工头”对于这几年 PHP 的变化我来不及参与.在这裡收集这几年对 PHP 的变化, 写篇心得过过本人自己的乾隐:回顾您以往的职业生涯, 您有好好的管理您写的 CODE 吗?还是每次都写到需求超级肥大了, 才延伸出一大堆的程序码管理问题.在这裡本人设计一个开发框架的架构, 让你的程序更简洁而且让你的程序更有条有理的被应用.当然这些架构教程我己经简化很多, 如果放入太多的设计反而会得到反效果.如果您是比较重口味的 PHP 设计者, 先说声报歉了.如果您常为了需求肥大难以管理你的程序,这篇文章对您来说会是个值得参考的文章, 至少它有著我十几年的需求开发经验.</p><p>\r\n			</p><h3>一.常见的 PHP 应用的架构:</h3><p>\r\n			<img src="images/detailed_01.png" alt=""/>\r\n			</p><p>在往下教程下去前, 本人先定义一些名词, 以方便大家接下去阅读教程.</p><p>\r\n			</p><p>DB :这一块不用多介绍, 我相信大家对 DB 的经验独道, 我们直接跳过去.</p><p>\r\n			</p><p>Access Layer :这一块全部都是放一些 Access Logic 在裡头, 主要的工作是负责跟 DB 还有 MEMCACHE 沟通, 你可以使用现成的开发框架达成这一层的目地, 也可以自己开发.但是这些逻辑建议您都保留在这一层.MEMCACHE :这一块主要是做为分散式架构的存取层, 大家有没有注意到一件事?它是走 TCP 11211 PORT .它可以用在什麽地方?</p><p>\r\n			</p><p>a.让你可以把从 DB 的资料捞到快取一份到 MEMCACHE ,来减轻资料库的工作负担, 这在大型而且流量很高的系统上, 它辨演很重要的角色就是可以减轻 DB 的工作量.我们这裡不多介绍 Memcahe 的使用及方式, 您可以多参考官方网站或其它网络上的教程.</p><p>\r\n			</p><p>b.有一些不用储存用完就不要的资料, 也可以利用 memcache 直接存取不用再交给 DB 去处理.</p><p>\r\n			</p><p>c.注意一件事:在过去裡我的下属们在使用它时常会犯一个错就是烂用 Memcache ,memcache 本身是一个 TCP 的服务在单台 linux 伺服器下最多只能使用1024个请求,当然你可以用 ulimit 提高它, 但是请先了解它的本质用对地方.它本身并不能做为程序本身加快程序效能的工具, 但是它是一个可以做到分散式的存取架构, 并且可以减轻 DB 负担的工具, 的好用工具.所以在使用它时要选对时机, 千万不要烂用.</p><p>\r\n			</p><p>Access Layer :这一层的工作主要是存取资料层的逻辑, 我将会2.会有更详细的说明.</p><p>\r\n			</p><p>Content Logic Layer :这一层的工作主要是负责处理存取层从 资料层要来的资料的逻辑, 我将会3.会有更详细的说明.</p><p>\r\n			</p><p>Presentation Layer :这一层的工作意义重大, 它主要是标准化 Presentation Logic 与 Content Logic Layer 沟通的标准,让你的画面逻辑不会愈来愈肥大及复杂, 我将会4.会有更详细的说明.</p><p>\r\n			</p><p>Presentation Logic Layer :这一层的工作是做为让 你的画面逻辑可以采用标准化的介面来与伺服器沟通, 如果 Presentation Layer 标准化了, 你的画面逻辑的可重覆利用性就会更高及有弹性, 我将会5.会有更详细的说明.</p><p>\r\n			</p><p>Client Layer :这一层就是我们平时便用的浏览器,云端服务等等的应用, 相信大家非常了解这一层可以做到的事, 所以我们就不多介绍 Client Layer 了.</p><p>\r\n			</p><h3>二.功能方块介绍:</h3><p>\r\n			</p><p>到这裡我们必需要将图裡的方块切的更细让大家理解请耐心的看完下一张图:</p><p>\r\n			<img src="images/detailed_02.png" alt=""/>\r\n			</p><h4>1. 数据库逻辑层 :</h4><p>\r\n			</p><p>Access Logic Layer 主要的工作是做为与 DB 和 Content Logic 沟通的区块, 在这裡本人建议大家在设计物件库或函式库前, 先参考这个架构.</p><p>\r\n			</p><p>把所有跟资料库存取的逻辑全部包装在这个区块下, 例如大家在设计DB时最爱用 Factory 来做 DB 的切换, 同时把这些逻辑全部整到这一层让您的程序更有层次更好管理.</p><p>\r\n			</p><p>看到这裡大家一定对一些使用 Factory 设计的 OOP DB 存取函式库不漠生.</p><p>\r\n			</p><p>这时我要介绍大家一个名词, Object-relational_mapping :</p><p>\r\n			</p><p>http://en.wikipedia.org/wiki/Object-relational_mapping</p><p>\r\n			</p><p>什麽地方有 ORM ?就是大家常用的.</p><p>\r\n			</p><p>CAKE PHP</p><p>\r\n			</p><p>ZEND FRAMEWORK.</p><p>\r\n			</p><p>Doctrine</p><p>\r\n			</p><p>Propel</p><p>\r\n			</p><p>CoughPHP</p><p>\r\n			</p><p>Symphony</p><p>\r\n			</p><p>当然…您也可以自己写, 重点是, 要懂得怎麽有效率的去管理你的存取层的逻辑.</p><p>\r\n			</p><p>而一但定义了这一层.</p><p>\r\n			</p><p>强烈建议在接下来的 Content Logic Layer , Presentation Logic Layer 严格禁止其它逻辑层的逻辑跳过它来存取资料库.</p><p>\r\n			</p><p>这麽做有什麽好处? :</p><p>\r\n			</p><p>1.确保其它工作者不会写出不良的DB存取逻辑造成你的系统不好维护</p><p>\r\n			</p><p>2.你可以不用再担心会有严重的存取层 BUG</p><p>\r\n			</p><p>3.它在使用上变的更安全, 不会让你的资料库暴露在 Content &amp; Presentation Logic Layer ,让你的 DB 有一定程度的保障.</p><p>\r\n			</p><p>4.如果你的 ORM TOOL 有提供管理器, 你还可以把所有的 SQL 语法倒出来检示有没有什麽存取过重的语法.</p><p>\r\n			</p><p>5.最重要的!!你可以把常用的存取层资料跟 MEMCACHE 做有效的资源管理, 让你的 DB 的资源更有效的被利用!!</p><p>\r\n			</p><p>补充说明:</p><p>\r\n			</p><p>Access MYSQL :资料库的新增改查逻辑全部放在这.</p><p>\r\n			</p><p>Access Memcache :与 MEMCACHE 存取的新增改查逻辑全部放在这.</p><p>\r\n			</p><p>Access NOSQL :现在最流行的 NOSQL ,你可以分别的去包装你要的逻辑在这裡面.</p><p>\r\n			</p><p>Other :如果你有别的使用资料存取的逻辑, 可以参造上述的方式一一的去整理….</p><p>\r\n			</p><h4>2. 逻辑层 :</h4><p>\r\n			</p><p>这一层有什麽东西?</p><p>\r\n			</p><p>1.你们服务用的到的商业逻辑, 你可以把每个商业逻辑用 OOP 设计, 并且放在这一块, 以利日后的管理.</p><p>\r\n			</p><p>2. String Parser :</p><p>\r\n			</p><h4>为什麽在这篇教程裡我会建议您设计这块? 因为它必需满足 Presentation Layer 要求的几个素求:</h4><p>\r\n			</p><p>1.一致性高,2.可重覆利用性高, 3.跨平台性高,4.云端应用, 所以大家不要关掉文章快点看到3.怎麽让你的系统可以符合这四个素求.</p><p>\r\n			</p><h4>3.表示层:</h4><p>\r\n			</p><p>我为何在这篇教程裡, 放入了这一层的应用?</p><p>\r\n			<img src="images/detailed_03.png" alt=""/>\r\n			</p><p>这要回顾到10年前, 我入手了一本 Wrox 的 Professional PHP4.</p><p>\r\n			</p><p>这本书我印象深刻, 因为它一共有十一个作者在写: 当时看到它有一篇单元 “多层式架构开发” ,让我对整个 WEB 架构开发的视野完全打开.不过我得承认我以前很嘴贱, 常说 SMARTY TEMPLATE 是玩具.</p><p>\r\n			</p><p>PS : SMARTY TEMPLATE 采用 tpl php var 的方式来做少了这一层,常会极端的用些言语说它不好.</p><p>\r\n			</p><p>你可以参考这二本书, 会发现这一层放入这个设计会让你未来工作变的轻松很多.</p><p>\r\n			</p><p>http://www.amazon.com/Profession … homas/dp/1861006918</p><p>\r\n			</p><p>http://www.amazon.com/Profession … p;keywords=PHP4+XML</p><p>\r\n			</p><p>#回到正题-</p><p>\r\n			</p><p>这一层专门用来处理 Content Logic Layer 处理好的资料, 利用 XML , JSON 等标准化的介面语言, 来规范你的 Content Logic Layer 按照你的 Convention (规范)来吐出资料给 Presentation Logic Layer</p><p>\r\n			</p><p>a.这样做有什麽好处：</p><p>\r\n			</p><h4>1.一致性高:</h4><p>\r\n			</p><p>也因为这样, 你的 Presentation Layer 有著标准化的格式, 所以你在使用 AJAX , AS , PHP SDK 等…做画面逻辑串接时,你的画面逻辑的程序将会变的一致性很高, 因为都是参考同样的格式, 让你的画面逻辑的程序不会乱长.工程师因为熟悉相同的介面格式, 工作起来将会非常的轻松.</p><p>\r\n			</p><h4>2.可重覆利用性高:</h4><p>\r\n			</p><p>在你享受 Presentation Layer 有著标准化的格式的好处时, 你会发现,你可以把画面逻辑也整理起来重覆利用,这时你会发现你少写好多好多的程序码.例如: 换页逻辑, 表单的呈现………..等等等, 只要另外塞 CSS 进来就好了. 根本不用写什麽程序.</p><p>\r\n			</p><h4>3.跨平台性高:</h4><p>\r\n			</p><p>啥咪?还有.是的!!!大家记得 RSS 吗? RSS就是利用了 Presentation Layer 这个特性让各种平台都可以串接 BLOG 的文章内容, 让你的系统有著强大的夸平台性整合能力.</p><p>\r\n			</p><h4>4.云端应用:</h4><p>\r\n			</p><p>是的即然跨平台性高了, 也就是你完成这个需求的同时, 你所有的系统内容的呈现可以丢给任何云端平台的整合!</p><p>\r\n			</p><h4>b.使用心得：</h4><p>\r\n			</p><p>这个设计, 会让你的系统架构非常灵活, 灵活到什麽程度?</p><p>\r\n			</p><p>以往一组新增/修改/删除/换页/搜寻, 只要写完一次而且完整的从下到上每一层整合上来.\r\n \r\n			我几乎不用二次开发, 直接套用之前写好的 content Logic , Presentation Logic 就可以完成一个需求.\r\n \r\n			一天可以完工三十几组新增/修改/删除/换页/搜寻的串接, 所以我当时消耗需求的速度比起一般没有用这个设计技巧快上非常的多. \r\n			而大家心裡会有疑问, 这不就是以前 RUBY &amp; CAKE PHP 的特性吗?是的!!就这个理念!\r\n \r\n			不过有差异, 就是 CAKE PHP 在做画面逻辑时, 它并不会真的把这层切开, 而是将 MVC 裡的 V 和 C 有效化的重覆利用, 但是一但要使用云端应用和夸平台时,</p><p>\r\n			</p><p>之前写过的程序无法直接透过 Presentation Layer 拉出去给第三方平台做串接.</p><p>\r\n			</p><p>虽然省了 ORM 那一层的重覆开发, 但是 Content Layer 和 Presentation Layer 还是要在手工调整的.\r\n \r\n			而一但一调整, 就会产生, DEBUG ,开发, 稳定性, 和你又多了一堆CODE 要维护的工作….</p><p>\r\n			</p><h4>6. 表现逻辑层 :</h4><p>\r\n			</p><p>这一层讲起来轻松多了, 因为大家己经有了非常多的 AJAX , XSL , FACEBOOK SDK , IOS , ANDROID , FLASH AS 的串接经验.\r\n \r\n			没错, 这裡就是把之前辛苦定义并且做好的 Presentation Layer 吐出来的格式做应用.</p><p>\r\n			</p><p>你可以透过~HTTP , SOCKET SERVER 等等..将你的 Presentation Layer 的 JSON , XML 吐出来, 并且交给你的画面逻辑程序去串接.\r\n			这麽一来你也轻松完成了一个云端的整合介面, 让你写的 PHP 可以广泛的使用在任何不同的平台上.</p><p>\r\n			</p><h4>7. 单元测试/压力测试/集成测试:</h4><p>\r\n			</p><p>在我开发每一层的元件时, 我都会要求工程师, 做单元测试(UNIT TEST), 压力测试( Stress Test ), 整合测试( Integration Test )</p><p>\r\n			</p><p>a.单元测试(UNIT TEST): 你可以使用 PHPUNIT 或是自己写, 针对你的一个函数的进和出的测试, 并且预先写好 TEST CASE ,确保每一层的函式库都是非常稳定而且没有问题的, 来让你管理程序的品质.</p><p>\r\n			</p><p>b.压力测试(Stess TEST): 针对每一个函式库的逻辑, 在做 UNIT TEST 的同时, 将 STRESS TEST 的 TEST CASE 喂进去, 并且记录每一个函式处理 TEST 所消耗的时间.</p><p>\r\n			</p><p>c.整合测试(Integration Test): 你可以写一支程序, 做 DAILY BUILD 每天去检查所有程序设计师 COMMIT 到 SVN 的程序码是否有问题, 确保每个函式之间整合是正常的, 降低 DEBUG 的工作量.</p>', '2019/04/155589679850924.jpg', '2019-04/22/155589679850924.jpg', '1555297686'),
(3, 'ONES-PHP开源企业管理软件', '<p>3祝贺你成为广州市天河金领技工学校学生，学校坐落于国家第二大公共实训基地“广州开发区、萝岗区高技能人才公共实训基地”</p><p>这几年我比较少写 PHP 了.</p><p>\r\n			</p><p>有阵子很迷它, 但是因为工作关系, 把较多的时间花在网络封包和数据库的分析工作上.而且因为年记较大了所以也很难找到写程序的工作多半都在做工程师的 “工头”对于这几年 PHP 的变化我来不及参与.在这裡收集这几年对 PHP 的变化, 写篇心得过过本人自己的乾隐:回顾您以往的职业生涯, 您有好好的管理您写的 CODE 吗?还是每次都写到需求超级肥大了, 才延伸出一大堆的程序码管理问题.在这裡本人设计一个开发框架的架构, 让你的程序更简洁而且让你的程序更有条有理的被应用.当然这些架构教程我己经简化很多, 如果放入太多的设计反而会得到反效果.如果您是比较重口味的 PHP 设计者, 先说声报歉了.如果您常为了需求肥大难以管理你的程序,这篇文章对您来说会是个值得参考的文章, 至少它有著我十几年的需求开发经验.</p><p>\r\n			</p><h3>一.常见的 PHP 应用的架构:</h3><p>\r\n			<img src="images/detailed_01.png" alt=""/>\r\n			</p><p>在往下教程下去前, 本人先定义一些名词, 以方便大家接下去阅读教程.</p><p>\r\n			</p><p>DB :这一块不用多介绍, 我相信大家对 DB 的经验独道, 我们直接跳过去.</p><p>\r\n			</p><p>Access Layer :这一块全部都是放一些 Access Logic 在裡头, 主要的工作是负责跟 DB 还有 MEMCACHE 沟通, 你可以使用现成的开发框架达成这一层的目地, 也可以自己开发.但是这些逻辑建议您都保留在这一层.MEMCACHE :这一块主要是做为分散式架构的存取层, 大家有没有注意到一件事?它是走 TCP 11211 PORT .它可以用在什麽地方?</p><p>\r\n			</p><p>a.让你可以把从 DB 的资料捞到快取一份到 MEMCACHE ,来减轻资料库的工作负担, 这在大型而且流量很高的系统上, 它辨演很重要的角色就是可以减轻 DB 的工作量.我们这裡不多介绍 Memcahe 的使用及方式, 您可以多参考官方网站或其它网络上的教程.</p><p>\r\n			</p><p>b.有一些不用储存用完就不要的资料, 也可以利用 memcache 直接存取不用再交给 DB 去处理.</p><p>\r\n			</p><p>c.注意一件事:在过去裡我的下属们在使用它时常会犯一个错就是烂用 Memcache ,memcache 本身是一个 TCP 的服务在单台 linux 伺服器下最多只能使用1024个请求,当然你可以用 ulimit 提高它, 但是请先了解它的本质用对地方.它本身并不能做为程序本身加快程序效能的工具, 但是它是一个可以做到分散式的存取架构, 并且可以减轻 DB 负担的工具, 的好用工具.所以在使用它时要选对时机, 千万不要烂用.</p><p>\r\n			</p><p>Access Layer :这一层的工作主要是存取资料层的逻辑, 我将会2.会有更详细的说明.</p><p>\r\n			</p><p>Content Logic Layer :这一层的工作主要是负责处理存取层从 资料层要来的资料的逻辑, 我将会3.会有更详细的说明.</p><p>\r\n			</p><p>Presentation Layer :这一层的工作意义重大, 它主要是标准化 Presentation Logic 与 Content Logic Layer 沟通的标准,让你的画面逻辑不会愈来愈肥大及复杂, 我将会4.会有更详细的说明.</p><p>\r\n			</p><p>Presentation Logic Layer :这一层的工作是做为让 你的画面逻辑可以采用标准化的介面来与伺服器沟通, 如果 Presentation Layer 标准化了, 你的画面逻辑的可重覆利用性就会更高及有弹性, 我将会5.会有更详细的说明.</p><p>\r\n			</p><p>Client Layer :这一层就是我们平时便用的浏览器,云端服务等等的应用, 相信大家非常了解这一层可以做到的事, 所以我们就不多介绍 Client Layer 了.</p><p>\r\n			</p><h3>二.功能方块介绍:</h3><p>\r\n			</p><p>到这裡我们必需要将图裡的方块切的更细让大家理解请耐心的看完下一张图:</p><p>\r\n			<img src="images/detailed_02.png" alt=""/>\r\n			</p><h4>1. 数据库逻辑层 :</h4><p>\r\n			</p><p>Access Logic Layer 主要的工作是做为与 DB 和 Content Logic 沟通的区块, 在这裡本人建议大家在设计物件库或函式库前, 先参考这个架构.</p><p>\r\n			</p><p>把所有跟资料库存取的逻辑全部包装在这个区块下, 例如大家在设计DB时最爱用 Factory 来做 DB 的切换, 同时把这些逻辑全部整到这一层让您的程序更有层次更好管理.</p><p>\r\n			</p><p>看到这裡大家一定对一些使用 Factory 设计的 OOP DB 存取函式库不漠生.</p><p>\r\n			</p><p>这时我要介绍大家一个名词, Object-relational_mapping :</p><p>\r\n			</p><p>http://en.wikipedia.org/wiki/Object-relational_mapping</p><p>\r\n			</p><p>什麽地方有 ORM ?就是大家常用的.</p><p>\r\n			</p><p>CAKE PHP</p><p>\r\n			</p><p>ZEND FRAMEWORK.</p><p>\r\n			</p><p>Doctrine</p><p>\r\n			</p><p>Propel</p><p>\r\n			</p><p>CoughPHP</p><p>\r\n			</p><p>Symphony</p><p>\r\n			</p><p>当然…您也可以自己写, 重点是, 要懂得怎麽有效率的去管理你的存取层的逻辑.</p><p>\r\n			</p><p>而一但定义了这一层.</p><p>\r\n			</p><p>强烈建议在接下来的 Content Logic Layer , Presentation Logic Layer 严格禁止其它逻辑层的逻辑跳过它来存取资料库.</p><p>\r\n			</p><p>这麽做有什麽好处? :</p><p>\r\n			</p><p>1.确保其它工作者不会写出不良的DB存取逻辑造成你的系统不好维护</p><p>\r\n			</p><p>2.你可以不用再担心会有严重的存取层 BUG</p><p>\r\n			</p><p>3.它在使用上变的更安全, 不会让你的资料库暴露在 Content &amp; Presentation Logic Layer ,让你的 DB 有一定程度的保障.</p><p>\r\n			</p><p>4.如果你的 ORM TOOL 有提供管理器, 你还可以把所有的 SQL 语法倒出来检示有没有什麽存取过重的语法.</p><p>\r\n			</p><p>5.最重要的!!你可以把常用的存取层资料跟 MEMCACHE 做有效的资源管理, 让你的 DB 的资源更有效的被利用!!</p><p>\r\n			</p><p>补充说明:</p><p>\r\n			</p><p>Access MYSQL :资料库的新增改查逻辑全部放在这.</p><p>\r\n			</p><p>Access Memcache :与 MEMCACHE 存取的新增改查逻辑全部放在这.</p><p>\r\n			</p><p>Access NOSQL :现在最流行的 NOSQL ,你可以分别的去包装你要的逻辑在这裡面.</p><p>\r\n			</p><p>Other :如果你有别的使用资料存取的逻辑, 可以参造上述的方式一一的去整理….</p><p>\r\n			</p><h4>2. 逻辑层 :</h4><p>\r\n			</p><p>这一层有什麽东西?</p><p>\r\n			</p><p>1.你们服务用的到的商业逻辑, 你可以把每个商业逻辑用 OOP 设计, 并且放在这一块, 以利日后的管理.</p><p>\r\n			</p><p>2. String Parser :</p><p>\r\n			</p><h4>为什麽在这篇教程裡我会建议您设计这块? 因为它必需满足 Presentation Layer 要求的几个素求:</h4><p>\r\n			</p><p>1.一致性高,2.可重覆利用性高, 3.跨平台性高,4.云端应用, 所以大家不要关掉文章快点看到3.怎麽让你的系统可以符合这四个素求.</p><p>\r\n			</p><h4>3.表示层:</h4><p>\r\n			</p><p>我为何在这篇教程裡, 放入了这一层的应用?</p><p>\r\n			<img src="images/detailed_03.png" alt=""/>\r\n			</p><p>这要回顾到10年前, 我入手了一本 Wrox 的 Professional PHP4.</p><p>\r\n			</p><p>这本书我印象深刻, 因为它一共有十一个作者在写: 当时看到它有一篇单元 “多层式架构开发” ,让我对整个 WEB 架构开发的视野完全打开.不过我得承认我以前很嘴贱, 常说 SMARTY TEMPLATE 是玩具.</p><p>\r\n			</p><p>PS : SMARTY TEMPLATE 采用 tpl php var 的方式来做少了这一层,常会极端的用些言语说它不好.</p><p>\r\n			</p><p>你可以参考这二本书, 会发现这一层放入这个设计会让你未来工作变的轻松很多.</p><p>\r\n			</p><p>http://www.amazon.com/Profession … homas/dp/1861006918</p><p>\r\n			</p><p>http://www.amazon.com/Profession … p;keywords=PHP4+XML</p><p>\r\n			</p><p>#回到正题-</p><p>\r\n			</p><p>这一层专门用来处理 Content Logic Layer 处理好的资料, 利用 XML , JSON 等标准化的介面语言, 来规范你的 Content Logic Layer 按照你的 Convention (规范)来吐出资料给 Presentation Logic Layer</p><p>\r\n			</p><p>a.这样做有什麽好处：</p><p>\r\n			</p><h4>1.一致性高:</h4><p>\r\n			</p><p>也因为这样, 你的 Presentation Layer 有著标准化的格式, 所以你在使用 AJAX , AS , PHP SDK 等…做画面逻辑串接时,你的画面逻辑的程序将会变的一致性很高, 因为都是参考同样的格式, 让你的画面逻辑的程序不会乱长.工程师因为熟悉相同的介面格式, 工作起来将会非常的轻松.</p><p>\r\n			</p><h4>2.可重覆利用性高:</h4><p>\r\n			</p><p>在你享受 Presentation Layer 有著标准化的格式的好处时, 你会发现,你可以把画面逻辑也整理起来重覆利用,这时你会发现你少写好多好多的程序码.例如: 换页逻辑, 表单的呈现………..等等等, 只要另外塞 CSS 进来就好了. 根本不用写什麽程序.</p><p>\r\n			</p><h4>3.跨平台性高:</h4><p>\r\n			</p><p>啥咪?还有.是的!!!大家记得 RSS 吗? RSS就是利用了 Presentation Layer 这个特性让各种平台都可以串接 BLOG 的文章内容, 让你的系统有著强大的夸平台性整合能力.</p><p>\r\n			</p><h4>4.云端应用:</h4><p>\r\n			</p><p>是的即然跨平台性高了, 也就是你完成这个需求的同时, 你所有的系统内容的呈现可以丢给任何云端平台的整合!</p><p>\r\n			</p><h4>b.使用心得：</h4><p>\r\n			</p><p>这个设计, 会让你的系统架构非常灵活, 灵活到什麽程度?</p><p>\r\n			</p><p>以往一组新增/修改/删除/换页/搜寻, 只要写完一次而且完整的从下到上每一层整合上来.\r\n \r\n			我几乎不用二次开发, 直接套用之前写好的 content Logic , Presentation Logic 就可以完成一个需求.\r\n \r\n			一天可以完工三十几组新增/修改/删除/换页/搜寻的串接, 所以我当时消耗需求的速度比起一般没有用这个设计技巧快上非常的多. \r\n			而大家心裡会有疑问, 这不就是以前 RUBY &amp; CAKE PHP 的特性吗?是的!!就这个理念!\r\n \r\n			不过有差异, 就是 CAKE PHP 在做画面逻辑时, 它并不会真的把这层切开, 而是将 MVC 裡的 V 和 C 有效化的重覆利用, 但是一但要使用云端应用和夸平台时,</p><p>\r\n			</p><p>之前写过的程序无法直接透过 Presentation Layer 拉出去给第三方平台做串接.</p><p>\r\n			</p><p>虽然省了 ORM 那一层的重覆开发, 但是 Content Layer 和 Presentation Layer 还是要在手工调整的.\r\n \r\n			而一但一调整, 就会产生, DEBUG ,开发, 稳定性, 和你又多了一堆CODE 要维护的工作….</p><p>\r\n			</p><h4>6. 表现逻辑层 :</h4><p>\r\n			</p><p>这一层讲起来轻松多了, 因为大家己经有了非常多的 AJAX , XSL , FACEBOOK SDK , IOS , ANDROID , FLASH AS 的串接经验.\r\n \r\n			没错, 这裡就是把之前辛苦定义并且做好的 Presentation Layer 吐出来的格式做应用.</p><p>\r\n			</p><p>你可以透过~HTTP , SOCKET SERVER 等等..将你的 Presentation Layer 的 JSON , XML 吐出来, 并且交给你的画面逻辑程序去串接.\r\n			这麽一来你也轻松完成了一个云端的整合介面, 让你写的 PHP 可以广泛的使用在任何不同的平台上.</p><p>\r\n			</p><h4>7. 单元测试/压力测试/集成测试:</h4><p>\r\n			</p><p>在我开发每一层的元件时, 我都会要求工程师, 做单元测试(UNIT TEST), 压力测试( Stress Test ), 整合测试( Integration Test )</p><p>\r\n			</p><p>a.单元测试(UNIT TEST): 你可以使用 PHPUNIT 或是自己写, 针对你的一个函数的进和出的测试, 并且预先写好 TEST CASE ,确保每一层的函式库都是非常稳定而且没有问题的, 来让你管理程序的品质.</p><p>\r\n			</p><p>b.压力测试(Stess TEST): 针对每一个函式库的逻辑, 在做 UNIT TEST 的同时, 将 STRESS TEST 的 TEST CASE 喂进去, 并且记录每一个函式处理 TEST 所消耗的时间.</p><p>\r\n			</p><p>c.整合测试(Integration Test): 你可以写一支程序, 做 DAILY BUILD 每天去检查所有程序设计师 COMMIT 到 SVN 的程序码是否有问题, 确保每个函式之间整合是正常的, 降低 DEBUG 的工作量.</p>', '2019/04/155589678722384.jpg', '2019-04/22/155589678722384.jpg', '1555297686');
INSERT INTO `wd_news` (`n_id`, `n_title`, `n_detail`, `n_img`, `n_thumb`, `n_time`) VALUES
(4, '10款提高iOS开发效率的XCode插件', '<p>4祝贺你成为广州市天河金领技工学校学生，学校坐落于国家第二大公共实训基地“广州开发区、萝岗区高技能人才公共实训基地”</p><p>这几年我比较少写 PHP 了.</p><p>\r\n			</p><p>有阵子很迷它, 但是因为工作关系, 把较多的时间花在网络封包和数据库的分析工作上.而且因为年记较大了所以也很难找到写程序的工作多半都在做工程师的 “工头”对于这几年 PHP 的变化我来不及参与.在这裡收集这几年对 PHP 的变化, 写篇心得过过本人自己的乾隐:回顾您以往的职业生涯, 您有好好的管理您写的 CODE 吗?还是每次都写到需求超级肥大了, 才延伸出一大堆的程序码管理问题.在这裡本人设计一个开发框架的架构, 让你的程序更简洁而且让你的程序更有条有理的被应用.当然这些架构教程我己经简化很多, 如果放入太多的设计反而会得到反效果.如果您是比较重口味的 PHP 设计者, 先说声报歉了.如果您常为了需求肥大难以管理你的程序,这篇文章对您来说会是个值得参考的文章, 至少它有著我十几年的需求开发经验.</p><p>\r\n			</p><h3>一.常见的 PHP 应用的架构:</h3><p>\r\n			<img src="images/detailed_01.png" alt=""/>\r\n			</p><p>在往下教程下去前, 本人先定义一些名词, 以方便大家接下去阅读教程.</p><p>\r\n			</p><p>DB :这一块不用多介绍, 我相信大家对 DB 的经验独道, 我们直接跳过去.</p><p>\r\n			</p><p>Access Layer :这一块全部都是放一些 Access Logic 在裡头, 主要的工作是负责跟 DB 还有 MEMCACHE 沟通, 你可以使用现成的开发框架达成这一层的目地, 也可以自己开发.但是这些逻辑建议您都保留在这一层.MEMCACHE :这一块主要是做为分散式架构的存取层, 大家有没有注意到一件事?它是走 TCP 11211 PORT .它可以用在什麽地方?</p><p>\r\n			</p><p>a.让你可以把从 DB 的资料捞到快取一份到 MEMCACHE ,来减轻资料库的工作负担, 这在大型而且流量很高的系统上, 它辨演很重要的角色就是可以减轻 DB 的工作量.我们这裡不多介绍 Memcahe 的使用及方式, 您可以多参考官方网站或其它网络上的教程.</p><p>\r\n			</p><p>b.有一些不用储存用完就不要的资料, 也可以利用 memcache 直接存取不用再交给 DB 去处理.</p><p>\r\n			</p><p>c.注意一件事:在过去裡我的下属们在使用它时常会犯一个错就是烂用 Memcache ,memcache 本身是一个 TCP 的服务在单台 linux 伺服器下最多只能使用1024个请求,当然你可以用 ulimit 提高它, 但是请先了解它的本质用对地方.它本身并不能做为程序本身加快程序效能的工具, 但是它是一个可以做到分散式的存取架构, 并且可以减轻 DB 负担的工具, 的好用工具.所以在使用它时要选对时机, 千万不要烂用.</p><p>\r\n			</p><p>Access Layer :这一层的工作主要是存取资料层的逻辑, 我将会2.会有更详细的说明.</p><p>\r\n			</p><p>Content Logic Layer :这一层的工作主要是负责处理存取层从 资料层要来的资料的逻辑, 我将会3.会有更详细的说明.</p><p>\r\n			</p><p>Presentation Layer :这一层的工作意义重大, 它主要是标准化 Presentation Logic 与 Content Logic Layer 沟通的标准,让你的画面逻辑不会愈来愈肥大及复杂, 我将会4.会有更详细的说明.</p><p>\r\n			</p><p>Presentation Logic Layer :这一层的工作是做为让 你的画面逻辑可以采用标准化的介面来与伺服器沟通, 如果 Presentation Layer 标准化了, 你的画面逻辑的可重覆利用性就会更高及有弹性, 我将会5.会有更详细的说明.</p><p>\r\n			</p><p>Client Layer :这一层就是我们平时便用的浏览器,云端服务等等的应用, 相信大家非常了解这一层可以做到的事, 所以我们就不多介绍 Client Layer 了.</p><p>\r\n			</p><h3>二.功能方块介绍:</h3><p>\r\n			</p><p>到这裡我们必需要将图裡的方块切的更细让大家理解请耐心的看完下一张图:</p><p>\r\n			<img src="images/detailed_02.png" alt=""/>\r\n			</p><h4>1. 数据库逻辑层 :</h4><p>\r\n			</p><p>Access Logic Layer 主要的工作是做为与 DB 和 Content Logic 沟通的区块, 在这裡本人建议大家在设计物件库或函式库前, 先参考这个架构.</p><p>\r\n			</p><p>把所有跟资料库存取的逻辑全部包装在这个区块下, 例如大家在设计DB时最爱用 Factory 来做 DB 的切换, 同时把这些逻辑全部整到这一层让您的程序更有层次更好管理.</p><p>\r\n			</p><p>看到这裡大家一定对一些使用 Factory 设计的 OOP DB 存取函式库不漠生.</p><p>\r\n			</p><p>这时我要介绍大家一个名词, Object-relational_mapping :</p><p>\r\n			</p><p>http://en.wikipedia.org/wiki/Object-relational_mapping</p><p>\r\n			</p><p>什麽地方有 ORM ?就是大家常用的.</p><p>\r\n			</p><p>CAKE PHP</p><p>\r\n			</p><p>ZEND FRAMEWORK.</p><p>\r\n			</p><p>Doctrine</p><p>\r\n			</p><p>Propel</p><p>\r\n			</p><p>CoughPHP</p><p>\r\n			</p><p>Symphony</p><p>\r\n			</p><p>当然…您也可以自己写, 重点是, 要懂得怎麽有效率的去管理你的存取层的逻辑.</p><p>\r\n			</p><p>而一但定义了这一层.</p><p>\r\n			</p><p>强烈建议在接下来的 Content Logic Layer , Presentation Logic Layer 严格禁止其它逻辑层的逻辑跳过它来存取资料库.</p><p>\r\n			</p><p>这麽做有什麽好处? :</p><p>\r\n			</p><p>1.确保其它工作者不会写出不良的DB存取逻辑造成你的系统不好维护</p><p>\r\n			</p><p>2.你可以不用再担心会有严重的存取层 BUG</p><p>\r\n			</p><p>3.它在使用上变的更安全, 不会让你的资料库暴露在 Content &amp; Presentation Logic Layer ,让你的 DB 有一定程度的保障.</p><p>\r\n			</p><p>4.如果你的 ORM TOOL 有提供管理器, 你还可以把所有的 SQL 语法倒出来检示有没有什麽存取过重的语法.</p><p>\r\n			</p><p>5.最重要的!!你可以把常用的存取层资料跟 MEMCACHE 做有效的资源管理, 让你的 DB 的资源更有效的被利用!!</p><p>\r\n			</p><p>补充说明:</p><p>\r\n			</p><p>Access MYSQL :资料库的新增改查逻辑全部放在这.</p><p>\r\n			</p><p>Access Memcache :与 MEMCACHE 存取的新增改查逻辑全部放在这.</p><p>\r\n			</p><p>Access NOSQL :现在最流行的 NOSQL ,你可以分别的去包装你要的逻辑在这裡面.</p><p>\r\n			</p><p>Other :如果你有别的使用资料存取的逻辑, 可以参造上述的方式一一的去整理….</p><p>\r\n			</p><h4>2. 逻辑层 :</h4><p>\r\n			</p><p>这一层有什麽东西?</p><p>\r\n			</p><p>1.你们服务用的到的商业逻辑, 你可以把每个商业逻辑用 OOP 设计, 并且放在这一块, 以利日后的管理.</p><p>\r\n			</p><p>2. String Parser :</p><p>\r\n			</p><h4>为什麽在这篇教程裡我会建议您设计这块? 因为它必需满足 Presentation Layer 要求的几个素求:</h4><p>\r\n			</p><p>1.一致性高,2.可重覆利用性高, 3.跨平台性高,4.云端应用, 所以大家不要关掉文章快点看到3.怎麽让你的系统可以符合这四个素求.</p><p>\r\n			</p><h4>3.表示层:</h4><p>\r\n			</p><p>我为何在这篇教程裡, 放入了这一层的应用?</p><p>\r\n			<img src="images/detailed_03.png" alt=""/>\r\n			</p><p>这要回顾到10年前, 我入手了一本 Wrox 的 Professional PHP4.</p><p>\r\n			</p><p>这本书我印象深刻, 因为它一共有十一个作者在写: 当时看到它有一篇单元 “多层式架构开发” ,让我对整个 WEB 架构开发的视野完全打开.不过我得承认我以前很嘴贱, 常说 SMARTY TEMPLATE 是玩具.</p><p>\r\n			</p><p>PS : SMARTY TEMPLATE 采用 tpl php var 的方式来做少了这一层,常会极端的用些言语说它不好.</p><p>\r\n			</p><p>你可以参考这二本书, 会发现这一层放入这个设计会让你未来工作变的轻松很多.</p><p>\r\n			</p><p>http://www.amazon.com/Profession … homas/dp/1861006918</p><p>\r\n			</p><p>http://www.amazon.com/Profession … p;keywords=PHP4+XML</p><p>\r\n			</p><p>#回到正题-</p><p>\r\n			</p><p>这一层专门用来处理 Content Logic Layer 处理好的资料, 利用 XML , JSON 等标准化的介面语言, 来规范你的 Content Logic Layer 按照你的 Convention (规范)来吐出资料给 Presentation Logic Layer</p><p>\r\n			</p><p>a.这样做有什麽好处：</p><p>\r\n			</p><h4>1.一致性高:</h4><p>\r\n			</p><p>也因为这样, 你的 Presentation Layer 有著标准化的格式, 所以你在使用 AJAX , AS , PHP SDK 等…做画面逻辑串接时,你的画面逻辑的程序将会变的一致性很高, 因为都是参考同样的格式, 让你的画面逻辑的程序不会乱长.工程师因为熟悉相同的介面格式, 工作起来将会非常的轻松.</p><p>\r\n			</p><h4>2.可重覆利用性高:</h4><p>\r\n			</p><p>在你享受 Presentation Layer 有著标准化的格式的好处时, 你会发现,你可以把画面逻辑也整理起来重覆利用,这时你会发现你少写好多好多的程序码.例如: 换页逻辑, 表单的呈现………..等等等, 只要另外塞 CSS 进来就好了. 根本不用写什麽程序.</p><p>\r\n			</p><h4>3.跨平台性高:</h4><p>\r\n			</p><p>啥咪?还有.是的!!!大家记得 RSS 吗? RSS就是利用了 Presentation Layer 这个特性让各种平台都可以串接 BLOG 的文章内容, 让你的系统有著强大的夸平台性整合能力.</p><p>\r\n			</p><h4>4.云端应用:</h4><p>\r\n			</p><p>是的即然跨平台性高了, 也就是你完成这个需求的同时, 你所有的系统内容的呈现可以丢给任何云端平台的整合!</p><p>\r\n			</p><h4>b.使用心得：</h4><p>\r\n			</p><p>这个设计, 会让你的系统架构非常灵活, 灵活到什麽程度?</p><p>\r\n			</p><p>以往一组新增/修改/删除/换页/搜寻, 只要写完一次而且完整的从下到上每一层整合上来.\r\n \r\n			我几乎不用二次开发, 直接套用之前写好的 content Logic , Presentation Logic 就可以完成一个需求.\r\n \r\n			一天可以完工三十几组新增/修改/删除/换页/搜寻的串接, 所以我当时消耗需求的速度比起一般没有用这个设计技巧快上非常的多. \r\n			而大家心裡会有疑问, 这不就是以前 RUBY &amp; CAKE PHP 的特性吗?是的!!就这个理念!\r\n \r\n			不过有差异, 就是 CAKE PHP 在做画面逻辑时, 它并不会真的把这层切开, 而是将 MVC 裡的 V 和 C 有效化的重覆利用, 但是一但要使用云端应用和夸平台时,</p><p>\r\n			</p><p>之前写过的程序无法直接透过 Presentation Layer 拉出去给第三方平台做串接.</p><p>\r\n			</p><p>虽然省了 ORM 那一层的重覆开发, 但是 Content Layer 和 Presentation Layer 还是要在手工调整的.\r\n \r\n			而一但一调整, 就会产生, DEBUG ,开发, 稳定性, 和你又多了一堆CODE 要维护的工作….</p><p>\r\n			</p><h4>6. 表现逻辑层 :</h4><p>\r\n			</p><p>这一层讲起来轻松多了, 因为大家己经有了非常多的 AJAX , XSL , FACEBOOK SDK , IOS , ANDROID , FLASH AS 的串接经验.\r\n \r\n			没错, 这裡就是把之前辛苦定义并且做好的 Presentation Layer 吐出来的格式做应用.</p><p>\r\n			</p><p>你可以透过~HTTP , SOCKET SERVER 等等..将你的 Presentation Layer 的 JSON , XML 吐出来, 并且交给你的画面逻辑程序去串接.\r\n			这麽一来你也轻松完成了一个云端的整合介面, 让你写的 PHP 可以广泛的使用在任何不同的平台上.</p><p>\r\n			</p><h4>7. 单元测试/压力测试/集成测试:</h4><p>\r\n			</p><p>在我开发每一层的元件时, 我都会要求工程师, 做单元测试(UNIT TEST), 压力测试( Stress Test ), 整合测试( Integration Test )</p><p>\r\n			</p><p>a.单元测试(UNIT TEST): 你可以使用 PHPUNIT 或是自己写, 针对你的一个函数的进和出的测试, 并且预先写好 TEST CASE ,确保每一层的函式库都是非常稳定而且没有问题的, 来让你管理程序的品质.</p><p>\r\n			</p><p>b.压力测试(Stess TEST): 针对每一个函式库的逻辑, 在做 UNIT TEST 的同时, 将 STRESS TEST 的 TEST CASE 喂进去, 并且记录每一个函式处理 TEST 所消耗的时间.</p><p>\r\n			</p><p>c.整合测试(Integration Test): 你可以写一支程序, 做 DAILY BUILD 每天去检查所有程序设计师 COMMIT 到 SVN 的程序码是否有问题, 确保每个函式之间整合是正常的, 降低 DEBUG 的工作量.</p>', '2019/04/155589677413208.jpg', '2019-04/22/155589677413208.jpg', '1555297686'),
(5, 'PHP系统设计与云架构', '<p>这几年我比较少写 PHP 了.</p><p>\r\n			</p><p>有阵子很迷它, 但是因为工作关系, 把较多的时间花在网络封包和数据库的分析工作上.而且因为年记较大了所以也很难找到写程序的工作多半都在做工程师的 “工头”对于这几年 PHP 的变化我来不及参与.在这裡收集这几年对 PHP 的变化, 写篇心得过过本人自己的乾隐:回顾您以往的职业生涯, 您有好好的管理您写的 CODE 吗?还是每次都写到需求超级肥大了, 才延伸出一大堆的程序码管理问题.在这裡本人设计一个开发框架的架构, 让你的程序更简洁而且让你的程序更有条有理的被应用.当然这些架构教程我己经简化很多, 如果放入太多的设计反而会得到反效果.如果您是比较重口味的 PHP 设计者, 先说声报歉了.如果您常为了需求肥大难以管理你的程序,这篇文章对您来说会是个值得参考的文章, 至少它有著我十几年的需求开发经验.</p><p>\r\n			</p><h3>一.常见的 PHP 应用的架构:</h3><p>\r\n			<img src="images/detailed_01.png" alt=""/>\r\n			</p><p>在往下教程下去前, 本人先定义一些名词, 以方便大家接下去阅读教程.</p><p>\r\n			</p><p>DB :这一块不用多介绍, 我相信大家对 DB 的经验独道, 我们直接跳过去.</p><p>\r\n			</p><p>Access Layer :这一块全部都是放一些 Access Logic 在裡头, 主要的工作是负责跟 DB 还有 MEMCACHE 沟通, 你可以使用现成的开发框架达成这一层的目地, 也可以自己开发.但是这些逻辑建议您都保留在这一层.MEMCACHE :这一块主要是做为分散式架构的存取层, 大家有没有注意到一件事?它是走 TCP 11211 PORT .它可以用在什麽地方?</p><p>\r\n			</p><p>a.让你可以把从 DB 的资料捞到快取一份到 MEMCACHE ,来减轻资料库的工作负担, 这在大型而且流量很高的系统上, 它辨演很重要的角色就是可以减轻 DB 的工作量.我们这裡不多介绍 Memcahe 的使用及方式, 您可以多参考官方网站或其它网络上的教程.</p><p>\r\n			</p><p>b.有一些不用储存用完就不要的资料, 也可以利用 memcache 直接存取不用再交给 DB 去处理.</p><p>\r\n			</p><p>c.注意一件事:在过去裡我的下属们在使用它时常会犯一个错就是烂用 Memcache ,memcache 本身是一个 TCP 的服务在单台 linux 伺服器下最多只能使用1024个请求,当然你可以用 ulimit 提高它, 但是请先了解它的本质用对地方.它本身并不能做为程序本身加快程序效能的工具, 但是它是一个可以做到分散式的存取架构, 并且可以减轻 DB 负担的工具, 的好用工具.所以在使用它时要选对时机, 千万不要烂用.</p><p>\r\n			</p><p>Access Layer :这一层的工作主要是存取资料层的逻辑, 我将会2.会有更详细的说明.</p><p>\r\n			</p><p>Content Logic Layer :这一层的工作主要是负责处理存取层从 资料层要来的资料的逻辑, 我将会3.会有更详细的说明.</p><p>\r\n			</p><p>Presentation Layer :这一层的工作意义重大, 它主要是标准化 Presentation Logic 与 Content Logic Layer 沟通的标准,让你的画面逻辑不会愈来愈肥大及复杂, 我将会4.会有更详细的说明.</p><p>\r\n			</p><p>Presentation Logic Layer :这一层的工作是做为让 你的画面逻辑可以采用标准化的介面来与伺服器沟通, 如果 Presentation Layer 标准化了, 你的画面逻辑的可重覆利用性就会更高及有弹性, 我将会5.会有更详细的说明.</p><p>\r\n			</p><p>Client Layer :这一层就是我们平时便用的浏览器,云端服务等等的应用, 相信大家非常了解这一层可以做到的事, 所以我们就不多介绍 Client Layer 了.</p><p>\r\n			</p><h3>二.功能方块介绍:</h3><p>\r\n			</p><p>到这裡我们必需要将图裡的方块切的更细让大家理解请耐心的看完下一张图:</p><p>\r\n			<img src="images/detailed_02.png" alt=""/>\r\n			</p><h4>1. 数据库逻辑层 :</h4><p>\r\n			</p><p>Access Logic Layer 主要的工作是做为与 DB 和 Content Logic 沟通的区块, 在这裡本人建议大家在设计物件库或函式库前, 先参考这个架构.</p><p>\r\n			</p><p>把所有跟资料库存取的逻辑全部包装在这个区块下, 例如大家在设计DB时最爱用 Factory 来做 DB 的切换, 同时把这些逻辑全部整到这一层让您的程序更有层次更好管理.</p><p>\r\n			</p><p>看到这裡大家一定对一些使用 Factory 设计的 OOP DB 存取函式库不漠生.</p><p>\r\n			</p><p>这时我要介绍大家一个名词, Object-relational_mapping :</p><p>\r\n			</p><p>http://en.wikipedia.org/wiki/Object-relational_mapping</p><p>\r\n			</p><p>什麽地方有 ORM ?就是大家常用的.</p><p>\r\n			</p><p>CAKE PHP</p><p>\r\n			</p><p>ZEND FRAMEWORK.</p><p>\r\n			</p><p>Doctrine</p><p>\r\n			</p><p>Propel</p><p>\r\n			</p><p>CoughPHP</p><p>\r\n			</p><p>Symphony</p><p>\r\n			</p><p>当然…您也可以自己写, 重点是, 要懂得怎麽有效率的去管理你的存取层的逻辑.</p><p>\r\n			</p><p>而一但定义了这一层.</p><p>\r\n			</p><p>强烈建议在接下来的 Content Logic Layer , Presentation Logic Layer 严格禁止其它逻辑层的逻辑跳过它来存取资料库.</p><p>\r\n			</p><p>这麽做有什麽好处? :</p><p>\r\n			</p><p>1.确保其它工作者不会写出不良的DB存取逻辑造成你的系统不好维护</p><p>\r\n			</p><p>2.你可以不用再担心会有严重的存取层 BUG</p><p>\r\n			</p><p>3.它在使用上变的更安全, 不会让你的资料库暴露在 Content &amp; Presentation Logic Layer ,让你的 DB 有一定程度的保障.</p><p>\r\n			</p><p>4.如果你的 ORM TOOL 有提供管理器, 你还可以把所有的 SQL 语法倒出来检示有没有什麽存取过重的语法.</p><p>\r\n			</p><p>5.最重要的!!你可以把常用的存取层资料跟 MEMCACHE 做有效的资源管理, 让你的 DB 的资源更有效的被利用!!</p><p>\r\n			</p><p>补充说明:</p><p>\r\n			</p><p>Access MYSQL :资料库的新增改查逻辑全部放在这.</p><p>\r\n			</p><p>Access Memcache :与 MEMCACHE 存取的新增改查逻辑全部放在这.</p><p>\r\n			</p><p>Access NOSQL :现在最流行的 NOSQL ,你可以分别的去包装你要的逻辑在这裡面.</p><p>\r\n			</p><p>Other :如果你有别的使用资料存取的逻辑, 可以参造上述的方式一一的去整理….</p><p>\r\n			</p><h4>2. 逻辑层 :</h4><p>\r\n			</p><p>这一层有什麽东西?</p><p>\r\n			</p><p>1.你们服务用的到的商业逻辑, 你可以把每个商业逻辑用 OOP 设计, 并且放在这一块, 以利日后的管理.</p><p>\r\n			</p><p>2. String Parser :</p><p>\r\n			</p><h4>为什麽在这篇教程裡我会建议您设计这块? 因为它必需满足 Presentation Layer 要求的几个素求:</h4><p>\r\n			</p><p>1.一致性高,2.可重覆利用性高, 3.跨平台性高,4.云端应用, 所以大家不要关掉文章快点看到3.怎麽让你的系统可以符合这四个素求.</p><p>\r\n			</p><h4>3.表示层:</h4><p>\r\n			</p><p>我为何在这篇教程裡, 放入了这一层的应用?</p><p>\r\n			<img src="images/detailed_03.png" alt=""/>\r\n			</p><p>这要回顾到10年前, 我入手了一本 Wrox 的 Professional PHP4.</p><p>\r\n			</p><p>这本书我印象深刻, 因为它一共有十一个作者在写: 当时看到它有一篇单元 “多层式架构开发” ,让我对整个 WEB 架构开发的视野完全打开.不过我得承认我以前很嘴贱, 常说 SMARTY TEMPLATE 是玩具.</p><p>\r\n			</p><p>PS : SMARTY TEMPLATE 采用 tpl php var 的方式来做少了这一层,常会极端的用些言语说它不好.</p><p>\r\n			</p><p>你可以参考这二本书, 会发现这一层放入这个设计会让你未来工作变的轻松很多.</p><p>\r\n			</p><p>http://www.amazon.com/Profession … homas/dp/1861006918</p><p>\r\n			</p><p>http://www.amazon.com/Profession … p;keywords=PHP4+XML</p><p>\r\n			</p><p>#回到正题-</p><p>\r\n			</p><p>这一层专门用来处理 Content Logic Layer 处理好的资料, 利用 XML , JSON 等标准化的介面语言, 来规范你的 Content Logic Layer 按照你的 Convention (规范)来吐出资料给 Presentation Logic Layer</p><p>\r\n			</p><p>a.这样做有什麽好处：</p><p>\r\n			</p><h4>1.一致性高:</h4><p>\r\n			</p><p>也因为这样, 你的 Presentation Layer 有著标准化的格式, 所以你在使用 AJAX , AS , PHP SDK 等…做画面逻辑串接时,你的画面逻辑的程序将会变的一致性很高, 因为都是参考同样的格式, 让你的画面逻辑的程序不会乱长.工程师因为熟悉相同的介面格式, 工作起来将会非常的轻松.</p><p>\r\n			</p><h4>2.可重覆利用性高:</h4><p>\r\n			</p><p>在你享受 Presentation Layer 有著标准化的格式的好处时, 你会发现,你可以把画面逻辑也整理起来重覆利用,这时你会发现你少写好多好多的程序码.例如: 换页逻辑, 表单的呈现………..等等等, 只要另外塞 CSS 进来就好了. 根本不用写什麽程序.</p><p>\r\n			</p><h4>3.跨平台性高:</h4><p>\r\n			</p><p>啥咪?还有.是的!!!大家记得 RSS 吗? RSS就是利用了 Presentation Layer 这个特性让各种平台都可以串接 BLOG 的文章内容, 让你的系统有著强大的夸平台性整合能力.</p><p>\r\n			</p><h4>4.云端应用:</h4><p>\r\n			</p><p>是的即然跨平台性高了, 也就是你完成这个需求的同时, 你所有的系统内容的呈现可以丢给任何云端平台的整合!</p><p>\r\n			</p><h4>b.使用心得：</h4><p>\r\n			</p><p>这个设计, 会让你的系统架构非常灵活, 灵活到什麽程度?</p><p>\r\n			</p><p>以往一组新增/修改/删除/换页/搜寻, 只要写完一次而且完整的从下到上每一层整合上来.\r\n \r\n			我几乎不用二次开发, 直接套用之前写好的 content Logic , Presentation Logic 就可以完成一个需求.\r\n \r\n			一天可以完工三十几组新增/修改/删除/换页/搜寻的串接, 所以我当时消耗需求的速度比起一般没有用这个设计技巧快上非常的多. \r\n			而大家心裡会有疑问, 这不就是以前 RUBY &amp; CAKE PHP 的特性吗?是的!!就这个理念!\r\n \r\n			不过有差异, 就是 CAKE PHP 在做画面逻辑时, 它并不会真的把这层切开, 而是将 MVC 裡的 V 和 C 有效化的重覆利用, 但是一但要使用云端应用和夸平台时,</p><p>\r\n			</p><p>之前写过的程序无法直接透过 Presentation Layer 拉出去给第三方平台做串接.</p><p>\r\n			</p><p>虽然省了 ORM 那一层的重覆开发, 但是 Content Layer 和 Presentation Layer 还是要在手工调整的.\r\n \r\n			而一但一调整, 就会产生, DEBUG ,开发, 稳定性, 和你又多了一堆CODE 要维护的工作….</p><p>\r\n			</p><h4>6. 表现逻辑层 :</h4><p>\r\n			</p><p>这一层讲起来轻松多了, 因为大家己经有了非常多的 AJAX , XSL , FACEBOOK SDK , IOS , ANDROID , FLASH AS 的串接经验.\r\n \r\n			没错, 这裡就是把之前辛苦定义并且做好的 Presentation Layer 吐出来的格式做应用.</p><p>\r\n			</p><p>你可以透过~HTTP , SOCKET SERVER 等等..将你的 Presentation Layer 的 JSON , XML 吐出来, 并且交给你的画面逻辑程序去串接.\r\n			这麽一来你也轻松完成了一个云端的整合介面, 让你写的 PHP 可以广泛的使用在任何不同的平台上.</p><p>\r\n			</p><h4>7. 单元测试/压力测试/集成测试:</h4><p>\r\n			</p><p>在我开发每一层的元件时, 我都会要求工程师, 做单元测试(UNIT TEST), 压力测试( Stress Test ), 整合测试( Integration Test )</p><p>\r\n			</p><p>a.单元测试(UNIT TEST): 你可以使用 PHPUNIT 或是自己写, 针对你的一个函数的进和出的测试, 并且预先写好 TEST CASE ,确保每一层的函式库都是非常稳定而且没有问题的, 来让你管理程序的品质.</p><p>\r\n			</p><p>b.压力测试(Stess TEST): 针对每一个函式库的逻辑, 在做 UNIT TEST 的同时, 将 STRESS TEST 的 TEST CASE 喂进去, 并且记录每一个函式处理 TEST 所消耗的时间.</p><p>\r\n			</p><p>c.整合测试(Integration Test): 你可以写一支程序, 做 DAILY BUILD 每天去检查所有程序设计师 COMMIT 到 SVN 的程序码是否有问题, 确保每个函式之间整合是正常的, 降低 DEBUG 的工作量.</p>', '2019/04/155589676057846.jpg', '2019-04/22/155589676057846.jpg', '1555297686'),
(6, 'PHP系统设计与云架构', '<p>这几年我比较少写 PHP 了.</p><p>\r\n			</p><p>有阵子很迷它, 但是因为工作关系, 把较多的时间花在网络封包和数据库的分析工作上.而且因为年记较大了所以也很难找到写程序的工作多半都在做工程师的 “工头”对于这几年 PHP 的变化我来不及参与.在这裡收集这几年对 PHP 的变化, 写篇心得过过本人自己的乾隐:回顾您以往的职业生涯, 您有好好的管理您写的 CODE 吗?还是每次都写到需求超级肥大了, 才延伸出一大堆的程序码管理问题.在这裡本人设计一个开发框架的架构, 让你的程序更简洁而且让你的程序更有条有理的被应用.当然这些架构教程我己经简化很多, 如果放入太多的设计反而会得到反效果.如果您是比较重口味的 PHP 设计者, 先说声报歉了.如果您常为了需求肥大难以管理你的程序,这篇文章对您来说会是个值得参考的文章, 至少它有著我十几年的需求开发经验.</p><p>\r\n			</p><h3>一.常见的 PHP 应用的架构:</h3><p>\r\n			<img src="images/detailed_01.png" alt=""/>\r\n			</p><p>在往下教程下去前, 本人先定义一些名词, 以方便大家接下去阅读教程.</p><p>\r\n			</p><p>DB :这一块不用多介绍, 我相信大家对 DB 的经验独道, 我们直接跳过去.</p><p>\r\n			</p><p>Access Layer :这一块全部都是放一些 Access Logic 在裡头, 主要的工作是负责跟 DB 还有 MEMCACHE 沟通, 你可以使用现成的开发框架达成这一层的目地, 也可以自己开发.但是这些逻辑建议您都保留在这一层.MEMCACHE :这一块主要是做为分散式架构的存取层, 大家有没有注意到一件事?它是走 TCP 11211 PORT .它可以用在什麽地方?</p><p>\r\n			</p><p>a.让你可以把从 DB 的资料捞到快取一份到 MEMCACHE ,来减轻资料库的工作负担, 这在大型而且流量很高的系统上, 它辨演很重要的角色就是可以减轻 DB 的工作量.我们这裡不多介绍 Memcahe 的使用及方式, 您可以多参考官方网站或其它网络上的教程.</p><p>\r\n			</p><p>b.有一些不用储存用完就不要的资料, 也可以利用 memcache 直接存取不用再交给 DB 去处理.</p><p>\r\n			</p><p>c.注意一件事:在过去裡我的下属们在使用它时常会犯一个错就是烂用 Memcache ,memcache 本身是一个 TCP 的服务在单台 linux 伺服器下最多只能使用1024个请求,当然你可以用 ulimit 提高它, 但是请先了解它的本质用对地方.它本身并不能做为程序本身加快程序效能的工具, 但是它是一个可以做到分散式的存取架构, 并且可以减轻 DB 负担的工具, 的好用工具.所以在使用它时要选对时机, 千万不要烂用.</p><p>\r\n			</p><p>Access Layer :这一层的工作主要是存取资料层的逻辑, 我将会2.会有更详细的说明.</p><p>\r\n			</p><p>Content Logic Layer :这一层的工作主要是负责处理存取层从 资料层要来的资料的逻辑, 我将会3.会有更详细的说明.</p><p>\r\n			</p><p>Presentation Layer :这一层的工作意义重大, 它主要是标准化 Presentation Logic 与 Content Logic Layer 沟通的标准,让你的画面逻辑不会愈来愈肥大及复杂, 我将会4.会有更详细的说明.</p><p>\r\n			</p><p>Presentation Logic Layer :这一层的工作是做为让 你的画面逻辑可以采用标准化的介面来与伺服器沟通, 如果 Presentation Layer 标准化了, 你的画面逻辑的可重覆利用性就会更高及有弹性, 我将会5.会有更详细的说明.</p><p>\r\n			</p><p>Client Layer :这一层就是我们平时便用的浏览器,云端服务等等的应用, 相信大家非常了解这一层可以做到的事, 所以我们就不多介绍 Client Layer 了.</p><p>\r\n			</p><h3>二.功能方块介绍:</h3><p>\r\n			</p><p>到这裡我们必需要将图裡的方块切的更细让大家理解请耐心的看完下一张图:</p><p>\r\n			<img src="images/detailed_02.png" alt=""/>\r\n			</p><h4>1. 数据库逻辑层 :</h4><p>\r\n			</p><p>Access Logic Layer 主要的工作是做为与 DB 和 Content Logic 沟通的区块, 在这裡本人建议大家在设计物件库或函式库前, 先参考这个架构.</p><p>\r\n			</p><p>把所有跟资料库存取的逻辑全部包装在这个区块下, 例如大家在设计DB时最爱用 Factory 来做 DB 的切换, 同时把这些逻辑全部整到这一层让您的程序更有层次更好管理.</p><p>\r\n			</p><p>看到这裡大家一定对一些使用 Factory 设计的 OOP DB 存取函式库不漠生.</p><p>\r\n			</p><p>这时我要介绍大家一个名词, Object-relational_mapping :</p><p>\r\n			</p><p>http://en.wikipedia.org/wiki/Object-relational_mapping</p><p>\r\n			</p><p>什麽地方有 ORM ?就是大家常用的.</p><p>\r\n			</p><p>CAKE PHP</p><p>\r\n			</p><p>ZEND FRAMEWORK.</p><p>\r\n			</p><p>Doctrine</p><p>\r\n			</p><p>Propel</p><p>\r\n			</p><p>CoughPHP</p><p>\r\n			</p><p>Symphony</p><p>\r\n			</p><p>当然…您也可以自己写, 重点是, 要懂得怎麽有效率的去管理你的存取层的逻辑.</p><p>\r\n			</p><p>而一但定义了这一层.</p><p>\r\n			</p><p>强烈建议在接下来的 Content Logic Layer , Presentation Logic Layer 严格禁止其它逻辑层的逻辑跳过它来存取资料库.</p><p>\r\n			</p><p>这麽做有什麽好处? :</p><p>\r\n			</p><p>1.确保其它工作者不会写出不良的DB存取逻辑造成你的系统不好维护</p><p>\r\n			</p><p>2.你可以不用再担心会有严重的存取层 BUG</p><p>\r\n			</p><p>3.它在使用上变的更安全, 不会让你的资料库暴露在 Content &amp; Presentation Logic Layer ,让你的 DB 有一定程度的保障.</p><p>\r\n			</p><p>4.如果你的 ORM TOOL 有提供管理器, 你还可以把所有的 SQL 语法倒出来检示有没有什麽存取过重的语法.</p><p>\r\n			</p><p>5.最重要的!!你可以把常用的存取层资料跟 MEMCACHE 做有效的资源管理, 让你的 DB 的资源更有效的被利用!!</p><p>\r\n			</p><p>补充说明:</p><p>\r\n			</p><p>Access MYSQL :资料库的新增改查逻辑全部放在这.</p><p>\r\n			</p><p>Access Memcache :与 MEMCACHE 存取的新增改查逻辑全部放在这.</p><p>\r\n			</p><p>Access NOSQL :现在最流行的 NOSQL ,你可以分别的去包装你要的逻辑在这裡面.</p><p>\r\n			</p><p>Other :如果你有别的使用资料存取的逻辑, 可以参造上述的方式一一的去整理….</p><p>\r\n			</p><h4>2. 逻辑层 :</h4><p>\r\n			</p><p>这一层有什麽东西?</p><p>\r\n			</p><p>1.你们服务用的到的商业逻辑, 你可以把每个商业逻辑用 OOP 设计, 并且放在这一块, 以利日后的管理.</p><p>\r\n			</p><p>2. String Parser :</p><p>\r\n			</p><h4>为什麽在这篇教程裡我会建议您设计这块? 因为它必需满足 Presentation Layer 要求的几个素求:</h4><p>\r\n			</p><p>1.一致性高,2.可重覆利用性高, 3.跨平台性高,4.云端应用, 所以大家不要关掉文章快点看到3.怎麽让你的系统可以符合这四个素求.</p><p>\r\n			</p><h4>3.表示层:</h4><p>\r\n			</p><p>我为何在这篇教程裡, 放入了这一层的应用?</p><p>\r\n			<img src="images/detailed_03.png" alt=""/>\r\n			</p><p>这要回顾到10年前, 我入手了一本 Wrox 的 Professional PHP4.</p><p>\r\n			</p><p>这本书我印象深刻, 因为它一共有十一个作者在写: 当时看到它有一篇单元 “多层式架构开发” ,让我对整个 WEB 架构开发的视野完全打开.不过我得承认我以前很嘴贱, 常说 SMARTY TEMPLATE 是玩具.</p><p>\r\n			</p><p>PS : SMARTY TEMPLATE 采用 tpl php var 的方式来做少了这一层,常会极端的用些言语说它不好.</p><p>\r\n			</p><p>你可以参考这二本书, 会发现这一层放入这个设计会让你未来工作变的轻松很多.</p><p>\r\n			</p><p>http://www.amazon.com/Profession … homas/dp/1861006918</p><p>\r\n			</p><p>http://www.amazon.com/Profession … p;keywords=PHP4+XML</p><p>\r\n			</p><p>#回到正题-</p><p>\r\n			</p><p>这一层专门用来处理 Content Logic Layer 处理好的资料, 利用 XML , JSON 等标准化的介面语言, 来规范你的 Content Logic Layer 按照你的 Convention (规范)来吐出资料给 Presentation Logic Layer</p><p>\r\n			</p><p>a.这样做有什麽好处：</p><p>\r\n			</p><h4>1.一致性高:</h4><p>\r\n			</p><p>也因为这样, 你的 Presentation Layer 有著标准化的格式, 所以你在使用 AJAX , AS , PHP SDK 等…做画面逻辑串接时,你的画面逻辑的程序将会变的一致性很高, 因为都是参考同样的格式, 让你的画面逻辑的程序不会乱长.工程师因为熟悉相同的介面格式, 工作起来将会非常的轻松.</p><p>\r\n			</p><h4>2.可重覆利用性高:</h4><p>\r\n			</p><p>在你享受 Presentation Layer 有著标准化的格式的好处时, 你会发现,你可以把画面逻辑也整理起来重覆利用,这时你会发现你少写好多好多的程序码.例如: 换页逻辑, 表单的呈现………..等等等, 只要另外塞 CSS 进来就好了. 根本不用写什麽程序.</p><p>\r\n			</p><h4>3.跨平台性高:</h4><p>\r\n			</p><p>啥咪?还有.是的!!!大家记得 RSS 吗? RSS就是利用了 Presentation Layer 这个特性让各种平台都可以串接 BLOG 的文章内容, 让你的系统有著强大的夸平台性整合能力.</p><p>\r\n			</p><h4>4.云端应用:</h4><p>\r\n			</p><p>是的即然跨平台性高了, 也就是你完成这个需求的同时, 你所有的系统内容的呈现可以丢给任何云端平台的整合!</p><p>\r\n			</p><h4>b.使用心得：</h4><p>\r\n			</p><p>这个设计, 会让你的系统架构非常灵活, 灵活到什麽程度?</p><p>\r\n			</p><p>以往一组新增/修改/删除/换页/搜寻, 只要写完一次而且完整的从下到上每一层整合上来.\r\n \r\n			我几乎不用二次开发, 直接套用之前写好的 content Logic , Presentation Logic 就可以完成一个需求.\r\n \r\n			一天可以完工三十几组新增/修改/删除/换页/搜寻的串接, 所以我当时消耗需求的速度比起一般没有用这个设计技巧快上非常的多. \r\n			而大家心裡会有疑问, 这不就是以前 RUBY &amp; CAKE PHP 的特性吗?是的!!就这个理念!\r\n \r\n			不过有差异, 就是 CAKE PHP 在做画面逻辑时, 它并不会真的把这层切开, 而是将 MVC 裡的 V 和 C 有效化的重覆利用, 但是一但要使用云端应用和夸平台时,</p><p>\r\n			</p><p>之前写过的程序无法直接透过 Presentation Layer 拉出去给第三方平台做串接.</p><p>\r\n			</p><p>虽然省了 ORM 那一层的重覆开发, 但是 Content Layer 和 Presentation Layer 还是要在手工调整的.\r\n \r\n			而一但一调整, 就会产生, DEBUG ,开发, 稳定性, 和你又多了一堆CODE 要维护的工作….</p><p>\r\n			</p><h4>6. 表现逻辑层 :</h4><p>\r\n			</p><p>这一层讲起来轻松多了, 因为大家己经有了非常多的 AJAX , XSL , FACEBOOK SDK , IOS , ANDROID , FLASH AS 的串接经验.\r\n \r\n			没错, 这裡就是把之前辛苦定义并且做好的 Presentation Layer 吐出来的格式做应用.</p><p>\r\n			</p><p>你可以透过~HTTP , SOCKET SERVER 等等..将你的 Presentation Layer 的 JSON , XML 吐出来, 并且交给你的画面逻辑程序去串接.\r\n			这麽一来你也轻松完成了一个云端的整合介面, 让你写的 PHP 可以广泛的使用在任何不同的平台上.</p><p>\r\n			</p><h4>7. 单元测试/压力测试/集成测试:</h4><p>\r\n			</p><p>在我开发每一层的元件时, 我都会要求工程师, 做单元测试(UNIT TEST), 压力测试( Stress Test ), 整合测试( Integration Test )</p><p>\r\n			</p><p>a.单元测试(UNIT TEST): 你可以使用 PHPUNIT 或是自己写, 针对你的一个函数的进和出的测试, 并且预先写好 TEST CASE ,确保每一层的函式库都是非常稳定而且没有问题的, 来让你管理程序的品质.</p><p>\r\n			</p><p>b.压力测试(Stess TEST): 针对每一个函式库的逻辑, 在做 UNIT TEST 的同时, 将 STRESS TEST 的 TEST CASE 喂进去, 并且记录每一个函式处理 TEST 所消耗的时间.</p><p>\r\n			</p><p>c.整合测试(Integration Test): 你可以写一支程序, 做 DAILY BUILD 每天去检查所有程序设计师 COMMIT 到 SVN 的程序码是否有问题, 确保每个函式之间整合是正常的, 降低 DEBUG 的工作量.</p>', '2019/04/15558967452386.jpg', '2019-04/22/15558967452386.jpg', '1555297786');
INSERT INTO `wd_news` (`n_id`, `n_title`, `n_detail`, `n_img`, `n_thumb`, `n_time`) VALUES
(7, 'PHP系统设计与云架构', '<p>这几年我比较少写 PHP 了.</p><p>\r\n			</p><p>有阵子很迷它, 但是因为工作关系, 把较多的时间花在网络封包和数据库的分析工作上.而且因为年记较大了所以也很难找到写程序的工作多半都在做工程师的 “工头”对于这几年 PHP 的变化我来不及参与.在这裡收集这几年对 PHP 的变化, 写篇心得过过本人自己的乾隐:回顾您以往的职业生涯, 您有好好的管理您写的 CODE 吗?还是每次都写到需求超级肥大了, 才延伸出一大堆的程序码管理问题.在这裡本人设计一个开发框架的架构, 让你的程序更简洁而且让你的程序更有条有理的被应用.当然这些架构教程我己经简化很多, 如果放入太多的设计反而会得到反效果.如果您是比较重口味的 PHP 设计者, 先说声报歉了.如果您常为了需求肥大难以管理你的程序,这篇文章对您来说会是个值得参考的文章, 至少它有著我十几年的需求开发经验.</p><p>\r\n			</p><h3>一.常见的 PHP 应用的架构:</h3><p>\r\n			<img src="images/detailed_01.png" alt=""/>\r\n			</p><p>在往下教程下去前, 本人先定义一些名词, 以方便大家接下去阅读教程.</p><p>\r\n			</p><p>DB :这一块不用多介绍, 我相信大家对 DB 的经验独道, 我们直接跳过去.</p><p>\r\n			</p><p>Access Layer :这一块全部都是放一些 Access Logic 在裡头, 主要的工作是负责跟 DB 还有 MEMCACHE 沟通, 你可以使用现成的开发框架达成这一层的目地, 也可以自己开发.但是这些逻辑建议您都保留在这一层.MEMCACHE :这一块主要是做为分散式架构的存取层, 大家有没有注意到一件事?它是走 TCP 11211 PORT .它可以用在什麽地方?</p><p>\r\n			</p><p>a.让你可以把从 DB 的资料捞到快取一份到 MEMCACHE ,来减轻资料库的工作负担, 这在大型而且流量很高的系统上, 它辨演很重要的角色就是可以减轻 DB 的工作量.我们这裡不多介绍 Memcahe 的使用及方式, 您可以多参考官方网站或其它网络上的教程.</p><p>\r\n			</p><p>b.有一些不用储存用完就不要的资料, 也可以利用 memcache 直接存取不用再交给 DB 去处理.</p><p>\r\n			</p><p>c.注意一件事:在过去裡我的下属们在使用它时常会犯一个错就是烂用 Memcache ,memcache 本身是一个 TCP 的服务在单台 linux 伺服器下最多只能使用1024个请求,当然你可以用 ulimit 提高它, 但是请先了解它的本质用对地方.它本身并不能做为程序本身加快程序效能的工具, 但是它是一个可以做到分散式的存取架构, 并且可以减轻 DB 负担的工具, 的好用工具.所以在使用它时要选对时机, 千万不要烂用.</p><p>\r\n			</p><p>Access Layer :这一层的工作主要是存取资料层的逻辑, 我将会2.会有更详细的说明.</p><p>\r\n			</p><p>Content Logic Layer :这一层的工作主要是负责处理存取层从 资料层要来的资料的逻辑, 我将会3.会有更详细的说明.</p><p>\r\n			</p><p>Presentation Layer :这一层的工作意义重大, 它主要是标准化 Presentation Logic 与 Content Logic Layer 沟通的标准,让你的画面逻辑不会愈来愈肥大及复杂, 我将会4.会有更详细的说明.</p><p>\r\n			</p><p>Presentation Logic Layer :这一层的工作是做为让 你的画面逻辑可以采用标准化的介面来与伺服器沟通, 如果 Presentation Layer 标准化了, 你的画面逻辑的可重覆利用性就会更高及有弹性, 我将会5.会有更详细的说明.</p><p>\r\n			</p><p>Client Layer :这一层就是我们平时便用的浏览器,云端服务等等的应用, 相信大家非常了解这一层可以做到的事, 所以我们就不多介绍 Client Layer 了.</p><p>\r\n			</p><h3>二.功能方块介绍:</h3><p>\r\n			</p><p>到这裡我们必需要将图裡的方块切的更细让大家理解请耐心的看完下一张图:</p><p>\r\n			<img src="images/detailed_02.png" alt=""/>\r\n			</p><h4>1. 数据库逻辑层 :</h4><p>\r\n			</p><p>Access Logic Layer 主要的工作是做为与 DB 和 Content Logic 沟通的区块, 在这裡本人建议大家在设计物件库或函式库前, 先参考这个架构.</p><p>\r\n			</p><p>把所有跟资料库存取的逻辑全部包装在这个区块下, 例如大家在设计DB时最爱用 Factory 来做 DB 的切换, 同时把这些逻辑全部整到这一层让您的程序更有层次更好管理.</p><p>\r\n			</p><p>看到这裡大家一定对一些使用 Factory 设计的 OOP DB 存取函式库不漠生.</p><p>\r\n			</p><p>这时我要介绍大家一个名词, Object-relational_mapping :</p><p>\r\n			</p><p>http://en.wikipedia.org/wiki/Object-relational_mapping</p><p>\r\n			</p><p>什麽地方有 ORM ?就是大家常用的.</p><p>\r\n			</p><p>CAKE PHP</p><p>\r\n			</p><p>ZEND FRAMEWORK.</p><p>\r\n			</p><p>Doctrine</p><p>\r\n			</p><p>Propel</p><p>\r\n			</p><p>CoughPHP</p><p>\r\n			</p><p>Symphony</p><p>\r\n			</p><p>当然…您也可以自己写, 重点是, 要懂得怎麽有效率的去管理你的存取层的逻辑.</p><p>\r\n			</p><p>而一但定义了这一层.</p><p>\r\n			</p><p>强烈建议在接下来的 Content Logic Layer , Presentation Logic Layer 严格禁止其它逻辑层的逻辑跳过它来存取资料库.</p><p>\r\n			</p><p>这麽做有什麽好处? :</p><p>\r\n			</p><p>1.确保其它工作者不会写出不良的DB存取逻辑造成你的系统不好维护</p><p>\r\n			</p><p>2.你可以不用再担心会有严重的存取层 BUG</p><p>\r\n			</p><p>3.它在使用上变的更安全, 不会让你的资料库暴露在 Content &amp; Presentation Logic Layer ,让你的 DB 有一定程度的保障.</p><p>\r\n			</p><p>4.如果你的 ORM TOOL 有提供管理器, 你还可以把所有的 SQL 语法倒出来检示有没有什麽存取过重的语法.</p><p>\r\n			</p><p>5.最重要的!!你可以把常用的存取层资料跟 MEMCACHE 做有效的资源管理, 让你的 DB 的资源更有效的被利用!!</p><p>\r\n			</p><p>补充说明:</p><p>\r\n			</p><p>Access MYSQL :资料库的新增改查逻辑全部放在这.</p><p>\r\n			</p><p>Access Memcache :与 MEMCACHE 存取的新增改查逻辑全部放在这.</p><p>\r\n			</p><p>Access NOSQL :现在最流行的 NOSQL ,你可以分别的去包装你要的逻辑在这裡面.</p><p>\r\n			</p><p>Other :如果你有别的使用资料存取的逻辑, 可以参造上述的方式一一的去整理….</p><p>\r\n			</p><h4>2. 逻辑层 :</h4><p>\r\n			</p><p>这一层有什麽东西?</p><p>\r\n			</p><p>1.你们服务用的到的商业逻辑, 你可以把每个商业逻辑用 OOP 设计, 并且放在这一块, 以利日后的管理.</p><p>\r\n			</p><p>2. String Parser :</p><p>\r\n			</p><h4>为什麽在这篇教程裡我会建议您设计这块? 因为它必需满足 Presentation Layer 要求的几个素求:</h4><p>\r\n			</p><p>1.一致性高,2.可重覆利用性高, 3.跨平台性高,4.云端应用, 所以大家不要关掉文章快点看到3.怎麽让你的系统可以符合这四个素求.</p><p>\r\n			</p><h4>3.表示层:</h4><p>\r\n			</p><p>我为何在这篇教程裡, 放入了这一层的应用?</p><p>\r\n			<img src="images/detailed_03.png" alt=""/>\r\n			</p><p>这要回顾到10年前, 我入手了一本 Wrox 的 Professional PHP4.</p><p>\r\n			</p><p>这本书我印象深刻, 因为它一共有十一个作者在写: 当时看到它有一篇单元 “多层式架构开发” ,让我对整个 WEB 架构开发的视野完全打开.不过我得承认我以前很嘴贱, 常说 SMARTY TEMPLATE 是玩具.</p><p>\r\n			</p><p>PS : SMARTY TEMPLATE 采用 tpl php var 的方式来做少了这一层,常会极端的用些言语说它不好.</p><p>\r\n			</p><p>你可以参考这二本书, 会发现这一层放入这个设计会让你未来工作变的轻松很多.</p><p>\r\n			</p><p>http://www.amazon.com/Profession … homas/dp/1861006918</p><p>\r\n			</p><p>http://www.amazon.com/Profession … p;keywords=PHP4+XML</p><p>\r\n			</p><p>#回到正题-</p><p>\r\n			</p><p>这一层专门用来处理 Content Logic Layer 处理好的资料, 利用 XML , JSON 等标准化的介面语言, 来规范你的 Content Logic Layer 按照你的 Convention (规范)来吐出资料给 Presentation Logic Layer</p><p>\r\n			</p><p>a.这样做有什麽好处：</p><p>\r\n			</p><h4>1.一致性高:</h4><p>\r\n			</p><p>也因为这样, 你的 Presentation Layer 有著标准化的格式, 所以你在使用 AJAX , AS , PHP SDK 等…做画面逻辑串接时,你的画面逻辑的程序将会变的一致性很高, 因为都是参考同样的格式, 让你的画面逻辑的程序不会乱长.工程师因为熟悉相同的介面格式, 工作起来将会非常的轻松.</p><p>\r\n			</p><h4>2.可重覆利用性高:</h4><p>\r\n			</p><p>在你享受 Presentation Layer 有著标准化的格式的好处时, 你会发现,你可以把画面逻辑也整理起来重覆利用,这时你会发现你少写好多好多的程序码.例如: 换页逻辑, 表单的呈现………..等等等, 只要另外塞 CSS 进来就好了. 根本不用写什麽程序.</p><p>\r\n			</p><h4>3.跨平台性高:</h4><p>\r\n			</p><p>啥咪?还有.是的!!!大家记得 RSS 吗? RSS就是利用了 Presentation Layer 这个特性让各种平台都可以串接 BLOG 的文章内容, 让你的系统有著强大的夸平台性整合能力.</p><p>\r\n			</p><h4>4.云端应用:</h4><p>\r\n			</p><p>是的即然跨平台性高了, 也就是你完成这个需求的同时, 你所有的系统内容的呈现可以丢给任何云端平台的整合!</p><p>\r\n			</p><h4>b.使用心得：</h4><p>\r\n			</p><p>这个设计, 会让你的系统架构非常灵活, 灵活到什麽程度?</p><p>\r\n			</p><p>以往一组新增/修改/删除/换页/搜寻, 只要写完一次而且完整的从下到上每一层整合上来.\r\n \r\n			我几乎不用二次开发, 直接套用之前写好的 content Logic , Presentation Logic 就可以完成一个需求.\r\n \r\n			一天可以完工三十几组新增/修改/删除/换页/搜寻的串接, 所以我当时消耗需求的速度比起一般没有用这个设计技巧快上非常的多. \r\n			而大家心裡会有疑问, 这不就是以前 RUBY &amp; CAKE PHP 的特性吗?是的!!就这个理念!\r\n \r\n			不过有差异, 就是 CAKE PHP 在做画面逻辑时, 它并不会真的把这层切开, 而是将 MVC 裡的 V 和 C 有效化的重覆利用, 但是一但要使用云端应用和夸平台时,</p><p>\r\n			</p><p>之前写过的程序无法直接透过 Presentation Layer 拉出去给第三方平台做串接.</p><p>\r\n			</p><p>虽然省了 ORM 那一层的重覆开发, 但是 Content Layer 和 Presentation Layer 还是要在手工调整的.\r\n \r\n			而一但一调整, 就会产生, DEBUG ,开发, 稳定性, 和你又多了一堆CODE 要维护的工作….</p><p>\r\n			</p><h4>6. 表现逻辑层 :</h4><p>\r\n			</p><p>这一层讲起来轻松多了, 因为大家己经有了非常多的 AJAX , XSL , FACEBOOK SDK , IOS , ANDROID , FLASH AS 的串接经验.\r\n \r\n			没错, 这裡就是把之前辛苦定义并且做好的 Presentation Layer 吐出来的格式做应用.</p><p>\r\n			</p><p>你可以透过~HTTP , SOCKET SERVER 等等..将你的 Presentation Layer 的 JSON , XML 吐出来, 并且交给你的画面逻辑程序去串接.\r\n			这麽一来你也轻松完成了一个云端的整合介面, 让你写的 PHP 可以广泛的使用在任何不同的平台上.</p><p>\r\n			</p><h4>7. 单元测试/压力测试/集成测试:</h4><p>\r\n			</p><p>在我开发每一层的元件时, 我都会要求工程师, 做单元测试(UNIT TEST), 压力测试( Stress Test ), 整合测试( Integration Test )</p><p>\r\n			</p><p>a.单元测试(UNIT TEST): 你可以使用 PHPUNIT 或是自己写, 针对你的一个函数的进和出的测试, 并且预先写好 TEST CASE ,确保每一层的函式库都是非常稳定而且没有问题的, 来让你管理程序的品质.</p><p>\r\n			</p><p>b.压力测试(Stess TEST): 针对每一个函式库的逻辑, 在做 UNIT TEST 的同时, 将 STRESS TEST 的 TEST CASE 喂进去, 并且记录每一个函式处理 TEST 所消耗的时间.</p><p>\r\n			</p><p>c.整合测试(Integration Test): 你可以写一支程序, 做 DAILY BUILD 每天去检查所有程序设计师 COMMIT 到 SVN 的程序码是否有问题, 确保每个函式之间整合是正常的, 降低 DEBUG 的工作量.</p>', '2019/04/155589672915304.jpg', '2019-04/22/155589672915304.jpg', '1555297886'),
(8, 'PHP系统设计与云架构', '<p>8这几年我比较少写 PHP 了.</p><p>\r\n			</p><p>有阵子很迷它, 但是因为工作关系, 把较多的时间花在网络封包和数据库的分析工作上.而且因为年记较大了所以也很难找到写程序的工作多半都在做工程师的 “工头”对于这几年 PHP 的变化我来不及参与.在这裡收集这几年对 PHP 的变化, 写篇心得过过本人自己的乾隐:回顾您以往的职业生涯, 您有好好的管理您写的 CODE 吗?还是每次都写到需求超级肥大了, 才延伸出一大堆的程序码管理问题.在这裡本人设计一个开发框架的架构, 让你的程序更简洁而且让你的程序更有条有理的被应用.当然这些架构教程我己经简化很多, 如果放入太多的设计反而会得到反效果.如果您是比较重口味的 PHP 设计者, 先说声报歉了.如果您常为了需求肥大难以管理你的程序,这篇文章对您来说会是个值得参考的文章, 至少它有著我十几年的需求开发经验.</p><p>\r\n			</p><h3>一.常见的 PHP 应用的架构:</h3><p>\r\n			<img src="images/detailed_01.png" alt=""/>\r\n			</p><p>在往下教程下去前, 本人先定义一些名词, 以方便大家接下去阅读教程.</p><p>\r\n			</p><p>DB :这一块不用多介绍, 我相信大家对 DB 的经验独道, 我们直接跳过去.</p><p>\r\n			</p><p>Access Layer :这一块全部都是放一些 Access Logic 在裡头, 主要的工作是负责跟 DB 还有 MEMCACHE 沟通, 你可以使用现成的开发框架达成这一层的目地, 也可以自己开发.但是这些逻辑建议您都保留在这一层.MEMCACHE :这一块主要是做为分散式架构的存取层, 大家有没有注意到一件事?它是走 TCP 11211 PORT .它可以用在什麽地方?</p><p>\r\n			</p><p>a.让你可以把从 DB 的资料捞到快取一份到 MEMCACHE ,来减轻资料库的工作负担, 这在大型而且流量很高的系统上, 它辨演很重要的角色就是可以减轻 DB 的工作量.我们这裡不多介绍 Memcahe 的使用及方式, 您可以多参考官方网站或其它网络上的教程.</p><p>\r\n			</p><p>b.有一些不用储存用完就不要的资料, 也可以利用 memcache 直接存取不用再交给 DB 去处理.</p><p>\r\n			</p><p>c.注意一件事:在过去裡我的下属们在使用它时常会犯一个错就是烂用 Memcache ,memcache 本身是一个 TCP 的服务在单台 linux 伺服器下最多只能使用1024个请求,当然你可以用 ulimit 提高它, 但是请先了解它的本质用对地方.它本身并不能做为程序本身加快程序效能的工具, 但是它是一个可以做到分散式的存取架构, 并且可以减轻 DB 负担的工具, 的好用工具.所以在使用它时要选对时机, 千万不要烂用.</p><p>\r\n			</p><p>Access Layer :这一层的工作主要是存取资料层的逻辑, 我将会2.会有更详细的说明.</p><p>\r\n			</p><p>Content Logic Layer :这一层的工作主要是负责处理存取层从 资料层要来的资料的逻辑, 我将会3.会有更详细的说明.</p><p>\r\n			</p><p>Presentation Layer :这一层的工作意义重大, 它主要是标准化 Presentation Logic 与 Content Logic Layer 沟通的标准,让你的画面逻辑不会愈来愈肥大及复杂, 我将会4.会有更详细的说明.</p><p>\r\n			</p><p>Presentation Logic Layer :这一层的工作是做为让 你的画面逻辑可以采用标准化的介面来与伺服器沟通, 如果 Presentation Layer 标准化了, 你的画面逻辑的可重覆利用性就会更高及有弹性, 我将会5.会有更详细的说明.</p><p>\r\n			</p><p>Client Layer :这一层就是我们平时便用的浏览器,云端服务等等的应用, 相信大家非常了解这一层可以做到的事, 所以我们就不多介绍 Client Layer 了.</p><p>\r\n			</p><h3>二.功能方块介绍:</h3><p>\r\n			</p><p>到这裡我们必需要将图裡的方块切的更细让大家理解请耐心的看完下一张图:</p><p>\r\n			<img src="images/detailed_02.png" alt=""/>\r\n			</p><h4>1. 数据库逻辑层 :</h4><p>\r\n			</p><p>Access Logic Layer 主要的工作是做为与 DB 和 Content Logic 沟通的区块, 在这裡本人建议大家在设计物件库或函式库前, 先参考这个架构.</p><p>\r\n			</p><p>把所有跟资料库存取的逻辑全部包装在这个区块下, 例如大家在设计DB时最爱用 Factory 来做 DB 的切换, 同时把这些逻辑全部整到这一层让您的程序更有层次更好管理.</p><p>\r\n			</p><p>看到这裡大家一定对一些使用 Factory 设计的 OOP DB 存取函式库不漠生.</p><p>\r\n			</p><p>这时我要介绍大家一个名词, Object-relational_mapping :</p><p>\r\n			</p><p>http://en.wikipedia.org/wiki/Object-relational_mapping</p><p>\r\n			</p><p>什麽地方有 ORM ?就是大家常用的.</p><p>\r\n			</p><p>CAKE PHP</p><p>\r\n			</p><p>ZEND FRAMEWORK.</p><p>\r\n			</p><p>Doctrine</p><p>\r\n			</p><p>Propel</p><p>\r\n			</p><p>CoughPHP</p><p>\r\n			</p><p>Symphony</p><p>\r\n			</p><p>当然…您也可以自己写, 重点是, 要懂得怎麽有效率的去管理你的存取层的逻辑.</p><p>\r\n			</p><p>而一但定义了这一层.</p><p>\r\n			</p><p>强烈建议在接下来的 Content Logic Layer , Presentation Logic Layer 严格禁止其它逻辑层的逻辑跳过它来存取资料库.</p><p>\r\n			</p><p>这麽做有什麽好处? :</p><p>\r\n			</p><p>1.确保其它工作者不会写出不良的DB存取逻辑造成你的系统不好维护</p><p>\r\n			</p><p>2.你可以不用再担心会有严重的存取层 BUG</p><p>\r\n			</p><p>3.它在使用上变的更安全, 不会让你的资料库暴露在 Content &amp; Presentation Logic Layer ,让你的 DB 有一定程度的保障.</p><p>\r\n			</p><p>4.如果你的 ORM TOOL 有提供管理器, 你还可以把所有的 SQL 语法倒出来检示有没有什麽存取过重的语法.</p><p>\r\n			</p><p>5.最重要的!!你可以把常用的存取层资料跟 MEMCACHE 做有效的资源管理, 让你的 DB 的资源更有效的被利用!!</p><p>\r\n			</p><p>补充说明:</p><p>\r\n			</p><p>Access MYSQL :资料库的新增改查逻辑全部放在这.</p><p>\r\n			</p><p>Access Memcache :与 MEMCACHE 存取的新增改查逻辑全部放在这.</p><p>\r\n			</p><p>Access NOSQL :现在最流行的 NOSQL ,你可以分别的去包装你要的逻辑在这裡面.</p><p>\r\n			</p><p>Other :如果你有别的使用资料存取的逻辑, 可以参造上述的方式一一的去整理….</p><p>\r\n			</p><h4>2. 逻辑层 :</h4><p>\r\n			</p><p>这一层有什麽东西?</p><p>\r\n			</p><p>1.你们服务用的到的商业逻辑, 你可以把每个商业逻辑用 OOP 设计, 并且放在这一块, 以利日后的管理.</p><p>\r\n			</p><p>2. String Parser :</p><p>\r\n			</p><h4>为什麽在这篇教程裡我会建议您设计这块? 因为它必需满足 Presentation Layer 要求的几个素求:</h4><p>\r\n			</p><p>1.一致性高,2.可重覆利用性高, 3.跨平台性高,4.云端应用, 所以大家不要关掉文章快点看到3.怎麽让你的系统可以符合这四个素求.</p><p>\r\n			</p><h4>3.表示层:</h4><p>\r\n			</p><p>我为何在这篇教程裡, 放入了这一层的应用?</p><p>\r\n			<img src="images/detailed_03.png" alt=""/>\r\n			</p><p>这要回顾到10年前, 我入手了一本 Wrox 的 Professional PHP4.</p><p>\r\n			</p><p>这本书我印象深刻, 因为它一共有十一个作者在写: 当时看到它有一篇单元 “多层式架构开发” ,让我对整个 WEB 架构开发的视野完全打开.不过我得承认我以前很嘴贱, 常说 SMARTY TEMPLATE 是玩具.</p><p>\r\n			</p><p>PS : SMARTY TEMPLATE 采用 tpl php var 的方式来做少了这一层,常会极端的用些言语说它不好.</p><p>\r\n			</p><p>你可以参考这二本书, 会发现这一层放入这个设计会让你未来工作变的轻松很多.</p><p>\r\n			</p><p>http://www.amazon.com/Profession … homas/dp/1861006918</p><p>\r\n			</p><p>http://www.amazon.com/Profession … p;keywords=PHP4+XML</p><p>\r\n			</p><p>#回到正题-</p><p>\r\n			</p><p>这一层专门用来处理 Content Logic Layer 处理好的资料, 利用 XML , JSON 等标准化的介面语言, 来规范你的 Content Logic Layer 按照你的 Convention (规范)来吐出资料给 Presentation Logic Layer</p><p>\r\n			</p><p>a.这样做有什麽好处：</p><p>\r\n			</p><h4>1.一致性高:</h4><p>\r\n			</p><p>也因为这样, 你的 Presentation Layer 有著标准化的格式, 所以你在使用 AJAX , AS , PHP SDK 等…做画面逻辑串接时,你的画面逻辑的程序将会变的一致性很高, 因为都是参考同样的格式, 让你的画面逻辑的程序不会乱长.工程师因为熟悉相同的介面格式, 工作起来将会非常的轻松.</p><p>\r\n			</p><h4>2.可重覆利用性高:</h4><p>\r\n			</p><p>在你享受 Presentation Layer 有著标准化的格式的好处时, 你会发现,你可以把画面逻辑也整理起来重覆利用,这时你会发现你少写好多好多的程序码.例如: 换页逻辑, 表单的呈现………..等等等, 只要另外塞 CSS 进来就好了. 根本不用写什麽程序.</p><p>\r\n			</p><h4>3.跨平台性高:</h4><p>\r\n			</p><p>啥咪?还有.是的!!!大家记得 RSS 吗? RSS就是利用了 Presentation Layer 这个特性让各种平台都可以串接 BLOG 的文章内容, 让你的系统有著强大的夸平台性整合能力.</p><p>\r\n			</p><h4>4.云端应用:</h4><p>\r\n			</p><p>是的即然跨平台性高了, 也就是你完成这个需求的同时, 你所有的系统内容的呈现可以丢给任何云端平台的整合!</p><p>\r\n			</p><h4>b.使用心得：</h4><p>\r\n			</p><p>这个设计, 会让你的系统架构非常灵活, 灵活到什麽程度?</p><p>\r\n			</p><p>以往一组新增/修改/删除/换页/搜寻, 只要写完一次而且完整的从下到上每一层整合上来.\r\n \r\n			我几乎不用二次开发, 直接套用之前写好的 content Logic , Presentation Logic 就可以完成一个需求.\r\n \r\n			一天可以完工三十几组新增/修改/删除/换页/搜寻的串接, 所以我当时消耗需求的速度比起一般没有用这个设计技巧快上非常的多. \r\n			而大家心裡会有疑问, 这不就是以前 RUBY &amp; CAKE PHP 的特性吗?是的!!就这个理念!\r\n \r\n			不过有差异, 就是 CAKE PHP 在做画面逻辑时, 它并不会真的把这层切开, 而是将 MVC 裡的 V 和 C 有效化的重覆利用, 但是一但要使用云端应用和夸平台时,</p><p>\r\n			</p><p>之前写过的程序无法直接透过 Presentation Layer 拉出去给第三方平台做串接.</p><p>\r\n			</p><p>虽然省了 ORM 那一层的重覆开发, 但是 Content Layer 和 Presentation Layer 还是要在手工调整的.\r\n \r\n			而一但一调整, 就会产生, DEBUG ,开发, 稳定性, 和你又多了一堆CODE 要维护的工作….</p><p>\r\n			</p><h4>6. 表现逻辑层 :</h4><p>\r\n			</p><p>这一层讲起来轻松多了, 因为大家己经有了非常多的 AJAX , XSL , FACEBOOK SDK , IOS , ANDROID , FLASH AS 的串接经验.\r\n \r\n			没错, 这裡就是把之前辛苦定义并且做好的 Presentation Layer 吐出来的格式做应用.</p><p>\r\n			</p><p>你可以透过~HTTP , SOCKET SERVER 等等..将你的 Presentation Layer 的 JSON , XML 吐出来, 并且交给你的画面逻辑程序去串接.\r\n			这麽一来你也轻松完成了一个云端的整合介面, 让你写的 PHP 可以广泛的使用在任何不同的平台上.</p><p>\r\n			</p><h4>7. 单元测试/压力测试/集成测试:</h4><p>\r\n			</p><p>在我开发每一层的元件时, 我都会要求工程师, 做单元测试(UNIT TEST), 压力测试( Stress Test ), 整合测试( Integration Test )</p><p>\r\n			</p><p>a.单元测试(UNIT TEST): 你可以使用 PHPUNIT 或是自己写, 针对你的一个函数的进和出的测试, 并且预先写好 TEST CASE ,确保每一层的函式库都是非常稳定而且没有问题的, 来让你管理程序的品质.</p><p>\r\n			</p><p>b.压力测试(Stess TEST): 针对每一个函式库的逻辑, 在做 UNIT TEST 的同时, 将 STRESS TEST 的 TEST CASE 喂进去, 并且记录每一个函式处理 TEST 所消耗的时间.</p><p>\r\n			</p><p>c.整合测试(Integration Test): 你可以写一支程序, 做 DAILY BUILD 每天去检查所有程序设计师 COMMIT 到 SVN 的程序码是否有问题, 确保每个函式之间整合是正常的, 降低 DEBUG 的工作量.</p>', '2019/04/155589671692071.jpg', '2019-04/22/155589671692071.jpg', '1555297886'),
(9, 'PHP系统设计与云架构', '<p>9这几年我比较少写 PHP 了.</p><p>\r\n			</p><p>有阵子很迷它, 但是因为工作关系, 把较多的时间花在网络封包和数据库的分析工作上.而且因为年记较大了所以也很难找到写程序的工作多半都在做工程师的 “工头”对于这几年 PHP 的变化我来不及参与.在这裡收集这几年对 PHP 的变化, 写篇心得过过本人自己的乾隐:回顾您以往的职业生涯, 您有好好的管理您写的 CODE 吗?还是每次都写到需求超级肥大了, 才延伸出一大堆的程序码管理问题.在这裡本人设计一个开发框架的架构, 让你的程序更简洁而且让你的程序更有条有理的被应用.当然这些架构教程我己经简化很多, 如果放入太多的设计反而会得到反效果.如果您是比较重口味的 PHP 设计者, 先说声报歉了.如果您常为了需求肥大难以管理你的程序,这篇文章对您来说会是个值得参考的文章, 至少它有著我十几年的需求开发经验.</p><p>\r\n			</p><h3>一.常见的 PHP 应用的架构:</h3><p>\r\n			<img src="images/detailed_01.png" alt=""/>\r\n			</p><p>在往下教程下去前, 本人先定义一些名词, 以方便大家接下去阅读教程.</p><p>\r\n			</p><p>DB :这一块不用多介绍, 我相信大家对 DB 的经验独道, 我们直接跳过去.</p><p>\r\n			</p><p>Access Layer :这一块全部都是放一些 Access Logic 在裡头, 主要的工作是负责跟 DB 还有 MEMCACHE 沟通, 你可以使用现成的开发框架达成这一层的目地, 也可以自己开发.但是这些逻辑建议您都保留在这一层.MEMCACHE :这一块主要是做为分散式架构的存取层, 大家有没有注意到一件事?它是走 TCP 11211 PORT .它可以用在什麽地方?</p><p>\r\n			</p><p>a.让你可以把从 DB 的资料捞到快取一份到 MEMCACHE ,来减轻资料库的工作负担, 这在大型而且流量很高的系统上, 它辨演很重要的角色就是可以减轻 DB 的工作量.我们这裡不多介绍 Memcahe 的使用及方式, 您可以多参考官方网站或其它网络上的教程.</p><p>\r\n			</p><p>b.有一些不用储存用完就不要的资料, 也可以利用 memcache 直接存取不用再交给 DB 去处理.</p><p>\r\n			</p><p>c.注意一件事:在过去裡我的下属们在使用它时常会犯一个错就是烂用 Memcache ,memcache 本身是一个 TCP 的服务在单台 linux 伺服器下最多只能使用1024个请求,当然你可以用 ulimit 提高它, 但是请先了解它的本质用对地方.它本身并不能做为程序本身加快程序效能的工具, 但是它是一个可以做到分散式的存取架构, 并且可以减轻 DB 负担的工具, 的好用工具.所以在使用它时要选对时机, 千万不要烂用.</p><p>\r\n			</p><p>Access Layer :这一层的工作主要是存取资料层的逻辑, 我将会2.会有更详细的说明.</p><p>\r\n			</p><p>Content Logic Layer :这一层的工作主要是负责处理存取层从 资料层要来的资料的逻辑, 我将会3.会有更详细的说明.</p><p>\r\n			</p><p>Presentation Layer :这一层的工作意义重大, 它主要是标准化 Presentation Logic 与 Content Logic Layer 沟通的标准,让你的画面逻辑不会愈来愈肥大及复杂, 我将会4.会有更详细的说明.</p><p>\r\n			</p><p>Presentation Logic Layer :这一层的工作是做为让 你的画面逻辑可以采用标准化的介面来与伺服器沟通, 如果 Presentation Layer 标准化了, 你的画面逻辑的可重覆利用性就会更高及有弹性, 我将会5.会有更详细的说明.</p><p>\r\n			</p><p>Client Layer :这一层就是我们平时便用的浏览器,云端服务等等的应用, 相信大家非常了解这一层可以做到的事, 所以我们就不多介绍 Client Layer 了.</p><p>\r\n			</p><h3>二.功能方块介绍:</h3><p>\r\n			</p><p>到这裡我们必需要将图裡的方块切的更细让大家理解请耐心的看完下一张图:</p><p>\r\n			<img src="images/detailed_02.png" alt=""/>\r\n			</p><h4>1. 数据库逻辑层 :</h4><p>\r\n			</p><p>Access Logic Layer 主要的工作是做为与 DB 和 Content Logic 沟通的区块, 在这裡本人建议大家在设计物件库或函式库前, 先参考这个架构.</p><p>\r\n			</p><p>把所有跟资料库存取的逻辑全部包装在这个区块下, 例如大家在设计DB时最爱用 Factory 来做 DB 的切换, 同时把这些逻辑全部整到这一层让您的程序更有层次更好管理.</p><p>\r\n			</p><p>看到这裡大家一定对一些使用 Factory 设计的 OOP DB 存取函式库不漠生.</p><p>\r\n			</p><p>这时我要介绍大家一个名词, Object-relational_mapping :</p><p>\r\n			</p><p>http://en.wikipedia.org/wiki/Object-relational_mapping</p><p>\r\n			</p><p>什麽地方有 ORM ?就是大家常用的.</p><p>\r\n			</p><p>CAKE PHP</p><p>\r\n			</p><p>ZEND FRAMEWORK.</p><p>\r\n			</p><p>Doctrine</p><p>\r\n			</p><p>Propel</p><p>\r\n			</p><p>CoughPHP</p><p>\r\n			</p><p>Symphony</p><p>\r\n			</p><p>当然…您也可以自己写, 重点是, 要懂得怎麽有效率的去管理你的存取层的逻辑.</p><p>\r\n			</p><p>而一但定义了这一层.</p><p>\r\n			</p><p>强烈建议在接下来的 Content Logic Layer , Presentation Logic Layer 严格禁止其它逻辑层的逻辑跳过它来存取资料库.</p><p>\r\n			</p><p>这麽做有什麽好处? :</p><p>\r\n			</p><p>1.确保其它工作者不会写出不良的DB存取逻辑造成你的系统不好维护</p><p>\r\n			</p><p>2.你可以不用再担心会有严重的存取层 BUG</p><p>\r\n			</p><p>3.它在使用上变的更安全, 不会让你的资料库暴露在 Content &amp; Presentation Logic Layer ,让你的 DB 有一定程度的保障.</p><p>\r\n			</p><p>4.如果你的 ORM TOOL 有提供管理器, 你还可以把所有的 SQL 语法倒出来检示有没有什麽存取过重的语法.</p><p>\r\n			</p><p>5.最重要的!!你可以把常用的存取层资料跟 MEMCACHE 做有效的资源管理, 让你的 DB 的资源更有效的被利用!!</p><p>\r\n			</p><p>补充说明:</p><p>\r\n			</p><p>Access MYSQL :资料库的新增改查逻辑全部放在这.</p><p>\r\n			</p><p>Access Memcache :与 MEMCACHE 存取的新增改查逻辑全部放在这.</p><p>\r\n			</p><p>Access NOSQL :现在最流行的 NOSQL ,你可以分别的去包装你要的逻辑在这裡面.</p><p>\r\n			</p><p>Other :如果你有别的使用资料存取的逻辑, 可以参造上述的方式一一的去整理….</p><p>\r\n			</p><h4>2. 逻辑层 :</h4><p>\r\n			</p><p>这一层有什麽东西?</p><p>\r\n			</p><p>1.你们服务用的到的商业逻辑, 你可以把每个商业逻辑用 OOP 设计, 并且放在这一块, 以利日后的管理.</p><p>\r\n			</p><p>2. String Parser :</p><p>\r\n			</p><h4>为什麽在这篇教程裡我会建议您设计这块? 因为它必需满足 Presentation Layer 要求的几个素求:</h4><p>\r\n			</p><p>1.一致性高,2.可重覆利用性高, 3.跨平台性高,4.云端应用, 所以大家不要关掉文章快点看到3.怎麽让你的系统可以符合这四个素求.</p><p>\r\n			</p><h4>3.表示层:</h4><p>\r\n			</p><p>我为何在这篇教程裡, 放入了这一层的应用?</p><p>\r\n			<img src="images/detailed_03.png" alt=""/>\r\n			</p><p>这要回顾到10年前, 我入手了一本 Wrox 的 Professional PHP4.</p><p>\r\n			</p><p>这本书我印象深刻, 因为它一共有十一个作者在写: 当时看到它有一篇单元 “多层式架构开发” ,让我对整个 WEB 架构开发的视野完全打开.不过我得承认我以前很嘴贱, 常说 SMARTY TEMPLATE 是玩具.</p><p>\r\n			</p><p>PS : SMARTY TEMPLATE 采用 tpl php var 的方式来做少了这一层,常会极端的用些言语说它不好.</p><p>\r\n			</p><p>你可以参考这二本书, 会发现这一层放入这个设计会让你未来工作变的轻松很多.</p><p>\r\n			</p><p>http://www.amazon.com/Profession … homas/dp/1861006918</p><p>\r\n			</p><p>http://www.amazon.com/Profession … p;keywords=PHP4+XML</p><p>\r\n			</p><p>#回到正题-</p><p>\r\n			</p><p>这一层专门用来处理 Content Logic Layer 处理好的资料, 利用 XML , JSON 等标准化的介面语言, 来规范你的 Content Logic Layer 按照你的 Convention (规范)来吐出资料给 Presentation Logic Layer</p><p>\r\n			</p><p>a.这样做有什麽好处：</p><p>\r\n			</p><h4>1.一致性高:</h4><p>\r\n			</p><p>也因为这样, 你的 Presentation Layer 有著标准化的格式, 所以你在使用 AJAX , AS , PHP SDK 等…做画面逻辑串接时,你的画面逻辑的程序将会变的一致性很高, 因为都是参考同样的格式, 让你的画面逻辑的程序不会乱长.工程师因为熟悉相同的介面格式, 工作起来将会非常的轻松.</p><p>\r\n			</p><h4>2.可重覆利用性高:</h4><p>\r\n			</p><p>在你享受 Presentation Layer 有著标准化的格式的好处时, 你会发现,你可以把画面逻辑也整理起来重覆利用,这时你会发现你少写好多好多的程序码.例如: 换页逻辑, 表单的呈现………..等等等, 只要另外塞 CSS 进来就好了. 根本不用写什麽程序.</p><p>\r\n			</p><h4>3.跨平台性高:</h4><p>\r\n			</p><p>啥咪?还有.是的!!!大家记得 RSS 吗? RSS就是利用了 Presentation Layer 这个特性让各种平台都可以串接 BLOG 的文章内容, 让你的系统有著强大的夸平台性整合能力.</p><p>\r\n			</p><h4>4.云端应用:</h4><p>\r\n			</p><p>是的即然跨平台性高了, 也就是你完成这个需求的同时, 你所有的系统内容的呈现可以丢给任何云端平台的整合!</p><p>\r\n			</p><h4>b.使用心得：</h4><p>\r\n			</p><p>这个设计, 会让你的系统架构非常灵活, 灵活到什麽程度?</p><p>\r\n			</p><p>以往一组新增/修改/删除/换页/搜寻, 只要写完一次而且完整的从下到上每一层整合上来.\r\n \r\n			我几乎不用二次开发, 直接套用之前写好的 content Logic , Presentation Logic 就可以完成一个需求.\r\n \r\n			一天可以完工三十几组新增/修改/删除/换页/搜寻的串接, 所以我当时消耗需求的速度比起一般没有用这个设计技巧快上非常的多. \r\n			而大家心裡会有疑问, 这不就是以前 RUBY &amp; CAKE PHP 的特性吗?是的!!就这个理念!\r\n \r\n			不过有差异, 就是 CAKE PHP 在做画面逻辑时, 它并不会真的把这层切开, 而是将 MVC 裡的 V 和 C 有效化的重覆利用, 但是一但要使用云端应用和夸平台时,</p><p>\r\n			</p><p>之前写过的程序无法直接透过 Presentation Layer 拉出去给第三方平台做串接.</p><p>\r\n			</p><p>虽然省了 ORM 那一层的重覆开发, 但是 Content Layer 和 Presentation Layer 还是要在手工调整的.\r\n \r\n			而一但一调整, 就会产生, DEBUG ,开发, 稳定性, 和你又多了一堆CODE 要维护的工作….</p><p>\r\n			</p><h4>6. 表现逻辑层 :</h4><p>\r\n			</p><p>这一层讲起来轻松多了, 因为大家己经有了非常多的 AJAX , XSL , FACEBOOK SDK , IOS , ANDROID , FLASH AS 的串接经验.\r\n \r\n			没错, 这裡就是把之前辛苦定义并且做好的 Presentation Layer 吐出来的格式做应用.</p><p>\r\n			</p><p>你可以透过~HTTP , SOCKET SERVER 等等..将你的 Presentation Layer 的 JSON , XML 吐出来, 并且交给你的画面逻辑程序去串接.\r\n			这麽一来你也轻松完成了一个云端的整合介面, 让你写的 PHP 可以广泛的使用在任何不同的平台上.</p><p>\r\n			</p><h4>7. 单元测试/压力测试/集成测试:</h4><p>\r\n			</p><p>在我开发每一层的元件时, 我都会要求工程师, 做单元测试(UNIT TEST), 压力测试( Stress Test ), 整合测试( Integration Test )</p><p>\r\n			</p><p>a.单元测试(UNIT TEST): 你可以使用 PHPUNIT 或是自己写, 针对你的一个函数的进和出的测试, 并且预先写好 TEST CASE ,确保每一层的函式库都是非常稳定而且没有问题的, 来让你管理程序的品质.</p><p>\r\n			</p><p>b.压力测试(Stess TEST): 针对每一个函式库的逻辑, 在做 UNIT TEST 的同时, 将 STRESS TEST 的 TEST CASE 喂进去, 并且记录每一个函式处理 TEST 所消耗的时间.</p><p>\r\n			</p><p>c.整合测试(Integration Test): 你可以写一支程序, 做 DAILY BUILD 每天去检查所有程序设计师 COMMIT 到 SVN 的程序码是否有问题, 确保每个函式之间整合是正常的, 降低 DEBUG 的工作量.</p>', '2019/04/155589670252749.jpg', '2019-04/22/155589670252749.jpg', '1555297986');
INSERT INTO `wd_news` (`n_id`, `n_title`, `n_detail`, `n_img`, `n_thumb`, `n_time`) VALUES
(10, 'PHP系统设计与云架构', '<p>10这几年我比较少写 PHP 了.</p><p>\r\n			</p><p>有阵子很迷它, 但是因为工作关系, 把较多的时间花在网络封包和数据库的分析工作上.而且因为年记较大了所以也很难找到写程序的工作多半都在做工程师的 “工头”对于这几年 PHP 的变化我来不及参与.在这裡收集这几年对 PHP 的变化, 写篇心得过过本人自己的乾隐:回顾您以往的职业生涯, 您有好好的管理您写的 CODE 吗?还是每次都写到需求超级肥大了, 才延伸出一大堆的程序码管理问题.在这裡本人设计一个开发框架的架构, 让你的程序更简洁而且让你的程序更有条有理的被应用.当然这些架构教程我己经简化很多, 如果放入太多的设计反而会得到反效果.如果您是比较重口味的 PHP 设计者, 先说声报歉了.如果您常为了需求肥大难以管理你的程序,这篇文章对您来说会是个值得参考的文章, 至少它有著我十几年的需求开发经验.</p><p>\r\n			</p><h3>一.常见的 PHP 应用的架构:</h3><p>\r\n			<img src="images/detailed_01.png" alt=""/>\r\n			</p><p>在往下教程下去前, 本人先定义一些名词, 以方便大家接下去阅读教程.</p><p>\r\n			</p><p>DB :这一块不用多介绍, 我相信大家对 DB 的经验独道, 我们直接跳过去.</p><p>\r\n			</p><p>Access Layer :这一块全部都是放一些 Access Logic 在裡头, 主要的工作是负责跟 DB 还有 MEMCACHE 沟通, 你可以使用现成的开发框架达成这一层的目地, 也可以自己开发.但是这些逻辑建议您都保留在这一层.MEMCACHE :这一块主要是做为分散式架构的存取层, 大家有没有注意到一件事?它是走 TCP 11211 PORT .它可以用在什麽地方?</p><p>\r\n			</p><p>a.让你可以把从 DB 的资料捞到快取一份到 MEMCACHE ,来减轻资料库的工作负担, 这在大型而且流量很高的系统上, 它辨演很重要的角色就是可以减轻 DB 的工作量.我们这裡不多介绍 Memcahe 的使用及方式, 您可以多参考官方网站或其它网络上的教程.</p><p>\r\n			</p><p>b.有一些不用储存用完就不要的资料, 也可以利用 memcache 直接存取不用再交给 DB 去处理.</p><p>\r\n			</p><p>c.注意一件事:在过去裡我的下属们在使用它时常会犯一个错就是烂用 Memcache ,memcache 本身是一个 TCP 的服务在单台 linux 伺服器下最多只能使用1024个请求,当然你可以用 ulimit 提高它, 但是请先了解它的本质用对地方.它本身并不能做为程序本身加快程序效能的工具, 但是它是一个可以做到分散式的存取架构, 并且可以减轻 DB 负担的工具, 的好用工具.所以在使用它时要选对时机, 千万不要烂用.</p><p>\r\n			</p><p>Access Layer :这一层的工作主要是存取资料层的逻辑, 我将会2.会有更详细的说明.</p><p>\r\n			</p><p>Content Logic Layer :这一层的工作主要是负责处理存取层从 资料层要来的资料的逻辑, 我将会3.会有更详细的说明.</p><p>\r\n			</p><p>Presentation Layer :这一层的工作意义重大, 它主要是标准化 Presentation Logic 与 Content Logic Layer 沟通的标准,让你的画面逻辑不会愈来愈肥大及复杂, 我将会4.会有更详细的说明.</p><p>\r\n			</p><p>Presentation Logic Layer :这一层的工作是做为让 你的画面逻辑可以采用标准化的介面来与伺服器沟通, 如果 Presentation Layer 标准化了, 你的画面逻辑的可重覆利用性就会更高及有弹性, 我将会5.会有更详细的说明.</p><p>\r\n			</p><p>Client Layer :这一层就是我们平时便用的浏览器,云端服务等等的应用, 相信大家非常了解这一层可以做到的事, 所以我们就不多介绍 Client Layer 了.</p><p>\r\n			</p><h3>二.功能方块介绍:</h3><p>\r\n			</p><p>到这裡我们必需要将图裡的方块切的更细让大家理解请耐心的看完下一张图:</p><p>\r\n			<img src="images/detailed_02.png" alt=""/>\r\n			</p><h4>1. 数据库逻辑层 :</h4><p>\r\n			</p><p>Access Logic Layer 主要的工作是做为与 DB 和 Content Logic 沟通的区块, 在这裡本人建议大家在设计物件库或函式库前, 先参考这个架构.</p><p>\r\n			</p><p>把所有跟资料库存取的逻辑全部包装在这个区块下, 例如大家在设计DB时最爱用 Factory 来做 DB 的切换, 同时把这些逻辑全部整到这一层让您的程序更有层次更好管理.</p><p>\r\n			</p><p>看到这裡大家一定对一些使用 Factory 设计的 OOP DB 存取函式库不漠生.</p><p>\r\n			</p><p>这时我要介绍大家一个名词, Object-relational_mapping :</p><p>\r\n			</p><p>http://en.wikipedia.org/wiki/Object-relational_mapping</p><p>\r\n			</p><p>什麽地方有 ORM ?就是大家常用的.</p><p>\r\n			</p><p>CAKE PHP</p><p>\r\n			</p><p>ZEND FRAMEWORK.</p><p>\r\n			</p><p>Doctrine</p><p>\r\n			</p><p>Propel</p><p>\r\n			</p><p>CoughPHP</p><p>\r\n			</p><p>Symphony</p><p>\r\n			</p><p>当然…您也可以自己写, 重点是, 要懂得怎麽有效率的去管理你的存取层的逻辑.</p><p>\r\n			</p><p>而一但定义了这一层.</p><p>\r\n			</p><p>强烈建议在接下来的 Content Logic Layer , Presentation Logic Layer 严格禁止其它逻辑层的逻辑跳过它来存取资料库.</p><p>\r\n			</p><p>这麽做有什麽好处? :</p><p>\r\n			</p><p>1.确保其它工作者不会写出不良的DB存取逻辑造成你的系统不好维护</p><p>\r\n			</p><p>2.你可以不用再担心会有严重的存取层 BUG</p><p>\r\n			</p><p>3.它在使用上变的更安全, 不会让你的资料库暴露在 Content &amp; Presentation Logic Layer ,让你的 DB 有一定程度的保障.</p><p>\r\n			</p><p>4.如果你的 ORM TOOL 有提供管理器, 你还可以把所有的 SQL 语法倒出来检示有没有什麽存取过重的语法.</p><p>\r\n			</p><p>5.最重要的!!你可以把常用的存取层资料跟 MEMCACHE 做有效的资源管理, 让你的 DB 的资源更有效的被利用!!</p><p>\r\n			</p><p>补充说明:</p><p>\r\n			</p><p>Access MYSQL :资料库的新增改查逻辑全部放在这.</p><p>\r\n			</p><p>Access Memcache :与 MEMCACHE 存取的新增改查逻辑全部放在这.</p><p>\r\n			</p><p>Access NOSQL :现在最流行的 NOSQL ,你可以分别的去包装你要的逻辑在这裡面.</p><p>\r\n			</p><p>Other :如果你有别的使用资料存取的逻辑, 可以参造上述的方式一一的去整理….</p><p>\r\n			</p><h4>2. 逻辑层 :</h4><p>\r\n			</p><p>这一层有什麽东西?</p><p>\r\n			</p><p>1.你们服务用的到的商业逻辑, 你可以把每个商业逻辑用 OOP 设计, 并且放在这一块, 以利日后的管理.</p><p>\r\n			</p><p>2. String Parser :</p><p>\r\n			</p><h4>为什麽在这篇教程裡我会建议您设计这块? 因为它必需满足 Presentation Layer 要求的几个素求:</h4><p>\r\n			</p><p>1.一致性高,2.可重覆利用性高, 3.跨平台性高,4.云端应用, 所以大家不要关掉文章快点看到3.怎麽让你的系统可以符合这四个素求.</p><p>\r\n			</p><h4>3.表示层:</h4><p>\r\n			</p><p>我为何在这篇教程裡, 放入了这一层的应用?</p><p>\r\n			<img src="images/detailed_03.png" alt=""/>\r\n			</p><p>这要回顾到10年前, 我入手了一本 Wrox 的 Professional PHP4.</p><p>\r\n			</p><p>这本书我印象深刻, 因为它一共有十一个作者在写: 当时看到它有一篇单元 “多层式架构开发” ,让我对整个 WEB 架构开发的视野完全打开.不过我得承认我以前很嘴贱, 常说 SMARTY TEMPLATE 是玩具.</p><p>\r\n			</p><p>PS : SMARTY TEMPLATE 采用 tpl php var 的方式来做少了这一层,常会极端的用些言语说它不好.</p><p>\r\n			</p><p>你可以参考这二本书, 会发现这一层放入这个设计会让你未来工作变的轻松很多.</p><p>\r\n			</p><p>http://www.amazon.com/Profession … homas/dp/1861006918</p><p>\r\n			</p><p>http://www.amazon.com/Profession … p;keywords=PHP4+XML</p><p>\r\n			</p><p>#回到正题-</p><p>\r\n			</p><p>这一层专门用来处理 Content Logic Layer 处理好的资料, 利用 XML , JSON 等标准化的介面语言, 来规范你的 Content Logic Layer 按照你的 Convention (规范)来吐出资料给 Presentation Logic Layer</p><p>\r\n			</p><p>a.这样做有什麽好处：</p><p>\r\n			</p><h4>1.一致性高:</h4><p>\r\n			</p><p>也因为这样, 你的 Presentation Layer 有著标准化的格式, 所以你在使用 AJAX , AS , PHP SDK 等…做画面逻辑串接时,你的画面逻辑的程序将会变的一致性很高, 因为都是参考同样的格式, 让你的画面逻辑的程序不会乱长.工程师因为熟悉相同的介面格式, 工作起来将会非常的轻松.</p><p>\r\n			</p><h4>2.可重覆利用性高:</h4><p>\r\n			</p><p>在你享受 Presentation Layer 有著标准化的格式的好处时, 你会发现,你可以把画面逻辑也整理起来重覆利用,这时你会发现你少写好多好多的程序码.例如: 换页逻辑, 表单的呈现………..等等等, 只要另外塞 CSS 进来就好了. 根本不用写什麽程序.</p><p>\r\n			</p><h4>3.跨平台性高:</h4><p>\r\n			</p><p>啥咪?还有.是的!!!大家记得 RSS 吗? RSS就是利用了 Presentation Layer 这个特性让各种平台都可以串接 BLOG 的文章内容, 让你的系统有著强大的夸平台性整合能力.</p><p>\r\n			</p><h4>4.云端应用:</h4><p>\r\n			</p><p>是的即然跨平台性高了, 也就是你完成这个需求的同时, 你所有的系统内容的呈现可以丢给任何云端平台的整合!</p><p>\r\n			</p><h4>b.使用心得：</h4><p>\r\n			</p><p>这个设计, 会让你的系统架构非常灵活, 灵活到什麽程度?</p><p>\r\n			</p><p>以往一组新增/修改/删除/换页/搜寻, 只要写完一次而且完整的从下到上每一层整合上来.\r\n \r\n			我几乎不用二次开发, 直接套用之前写好的 content Logic , Presentation Logic 就可以完成一个需求.\r\n \r\n			一天可以完工三十几组新增/修改/删除/换页/搜寻的串接, 所以我当时消耗需求的速度比起一般没有用这个设计技巧快上非常的多. \r\n			而大家心裡会有疑问, 这不就是以前 RUBY &amp; CAKE PHP 的特性吗?是的!!就这个理念!\r\n \r\n			不过有差异, 就是 CAKE PHP 在做画面逻辑时, 它并不会真的把这层切开, 而是将 MVC 裡的 V 和 C 有效化的重覆利用, 但是一但要使用云端应用和夸平台时,</p><p>\r\n			</p><p>之前写过的程序无法直接透过 Presentation Layer 拉出去给第三方平台做串接.</p><p>\r\n			</p><p>虽然省了 ORM 那一层的重覆开发, 但是 Content Layer 和 Presentation Layer 还是要在手工调整的.\r\n \r\n			而一但一调整, 就会产生, DEBUG ,开发, 稳定性, 和你又多了一堆CODE 要维护的工作….</p><p>\r\n			</p><h4>6. 表现逻辑层 :</h4><p>\r\n			</p><p>这一层讲起来轻松多了, 因为大家己经有了非常多的 AJAX , XSL , FACEBOOK SDK , IOS , ANDROID , FLASH AS 的串接经验.\r\n \r\n			没错, 这裡就是把之前辛苦定义并且做好的 Presentation Layer 吐出来的格式做应用.</p><p>\r\n			</p><p>你可以透过~HTTP , SOCKET SERVER 等等..将你的 Presentation Layer 的 JSON , XML 吐出来, 并且交给你的画面逻辑程序去串接.\r\n			这麽一来你也轻松完成了一个云端的整合介面, 让你写的 PHP 可以广泛的使用在任何不同的平台上.</p><p>\r\n			</p><h4>7. 单元测试/压力测试/集成测试:</h4><p>\r\n			</p><p>在我开发每一层的元件时, 我都会要求工程师, 做单元测试(UNIT TEST), 压力测试( Stress Test ), 整合测试( Integration Test )</p><p>\r\n			</p><p>a.单元测试(UNIT TEST): 你可以使用 PHPUNIT 或是自己写, 针对你的一个函数的进和出的测试, 并且预先写好 TEST CASE ,确保每一层的函式库都是非常稳定而且没有问题的, 来让你管理程序的品质.</p><p>\r\n			</p><p>b.压力测试(Stess TEST): 针对每一个函式库的逻辑, 在做 UNIT TEST 的同时, 将 STRESS TEST 的 TEST CASE 喂进去, 并且记录每一个函式处理 TEST 所消耗的时间.</p><p>\r\n			</p><p>c.整合测试(Integration Test): 你可以写一支程序, 做 DAILY BUILD 每天去检查所有程序设计师 COMMIT 到 SVN 的程序码是否有问题, 确保每个函式之间整合是正常的, 降低 DEBUG 的工作量.</p>', '2019/04/155589669075769.jpg', '2019-04/22/155589669075769.jpg', '1555297986'),
(11, 'ONES-PHP开源企业管理软件', '<p>1166黑龙江水木创想科技发展有限公司 水木创想专注于互联网品牌建设及智慧医疗管理系统为业务核心。致力于为企事业单位、医疗、政府机构提供信息化服务。设计服务范围包括：网站设计与开发建设、智慧医疗管理系统、移动APP、电商系统、系统研发、软件定制开发、社区教育化平台等。目前与多家企事业单位保			</p><p>这几年我比较少写 PHP 了.</p><p>\r\n			</p><p>有阵子很迷它, 但是因为工作关系, 把较多的时间花在网络封包和数据库的分析工作上.而且因为年记较大了所以也很难找到写程序的工作多半都在做工程师的 “工头”对于这几年 PHP 的变化我来不及参与.在这裡收集这几年对 PHP 的变化, 写篇心得过过本人自己的乾隐:回顾您以往的职业生涯, 您有好好的管理您写的 CODE 吗?还是每次都写到需求超级肥大了, 才延伸出一大堆的程序码管理问题.在这裡本人设计一个开发框架的架构, 让你的程序更简洁而且让你的程序更有条有理的被应用.当然这些架构教程我己经简化很多, 如果放入太多的设计反而会得到反效果.如果您是比较重口味的 PHP 设计者, 先说声报歉了.如果您常为了需求肥大难以管理你的程序,这篇文章对您来说会是个值得参考的文章, 至少它有著我十几年的需求开发经验.</p><p>\r\n			</p><h3>一.常见的 PHP 应用的架构:</h3><p>\r\n			<img src="images/detailed_01.png" alt=""/>\r\n			</p><p>在往下教程下去前, 本人先定义一些名词, 以方便大家接下去阅读教程.</p><p>\r\n			</p><p>DB :这一块不用多介绍, 我相信大家对 DB 的经验独道, 我们直接跳过去.</p><p>\r\n			</p><p>Access Layer :这一块全部都是放一些 Access Logic 在裡头, 主要的工作是负责跟 DB 还有 MEMCACHE 沟通, 你可以使用现成的开发框架达成这一层的目地, 也可以自己开发.但是这些逻辑建议您都保留在这一层.MEMCACHE :这一块主要是做为分散式架构的存取层, 大家有没有注意到一件事?它是走 TCP 11211 PORT .它可以用在什麽地方?</p><p>\r\n			</p><p>a.让你可以把从 DB 的资料捞到快取一份到 MEMCACHE ,来减轻资料库的工作负担, 这在大型而且流量很高的系统上, 它辨演很重要的角色就是可以减轻 DB 的工作量.我们这裡不多介绍 Memcahe 的使用及方式, 您可以多参考官方网站或其它网络上的教程.</p><p>\r\n			</p><p>b.有一些不用储存用完就不要的资料, 也可以利用 memcache 直接存取不用再交给 DB 去处理.</p><p>\r\n			</p><p>c.注意一件事:在过去裡我的下属们在使用它时常会犯一个错就是烂用 Memcache ,memcache 本身是一个 TCP 的服务在单台 linux 伺服器下最多只能使用1024个请求,当然你可以用 ulimit 提高它, 但是请先了解它的本质用对地方.它本身并不能做为程序本身加快程序效能的工具, 但是它是一个可以做到分散式的存取架构, 并且可以减轻 DB 负担的工具, 的好用工具.所以在使用它时要选对时机, 千万不要烂用.</p><p>\r\n			</p><p>Access Layer :这一层的工作主要是存取资料层的逻辑, 我将会2.会有更详细的说明.</p><p>\r\n			</p><p>Content Logic Layer :这一层的工作主要是负责处理存取层从 资料层要来的资料的逻辑, 我将会3.会有更详细的说明.</p><p>\r\n			</p><p>Presentation Layer :这一层的工作意义重大, 它主要是标准化 Presentation Logic 与 Content Logic Layer 沟通的标准,让你的画面逻辑不会愈来愈肥大及复杂, 我将会4.会有更详细的说明.</p><p>\r\n			</p><p>Presentation Logic Layer :这一层的工作是做为让 你的画面逻辑可以采用标准化的介面来与伺服器沟通, 如果 Presentation Layer 标准化了, 你的画面逻辑的可重覆利用性就会更高及有弹性, 我将会5.会有更详细的说明.</p><p>\r\n			</p><p>Client Layer :这一层就是我们平时便用的浏览器,云端服务等等的应用, 相信大家非常了解这一层可以做到的事, 所以我们就不多介绍 Client Layer 了.</p><p>\r\n			</p><h3>二.功能方块介绍:</h3><p>\r\n			</p><p>到这裡我们必需要将图裡的方块切的更细让大家理解请耐心的看完下一张图:</p><p>\r\n			<img src="images/detailed_02.png" alt=""/>\r\n			</p><h4>1. 数据库逻辑层 :</h4><p>\r\n			</p><p>Access Logic Layer 主要的工作是做为与 DB 和 Content Logic 沟通的区块, 在这裡本人建议大家在设计物件库或函式库前, 先参考这个架构.</p><p>\r\n			</p><p>把所有跟资料库存取的逻辑全部包装在这个区块下, 例如大家在设计DB时最爱用 Factory 来做 DB 的切换, 同时把这些逻辑全部整到这一层让您的程序更有层次更好管理.</p><p>\r\n			</p><p>看到这裡大家一定对一些使用 Factory 设计的 OOP DB 存取函式库不漠生.</p><p>\r\n			</p><p>这时我要介绍大家一个名词, Object-relational_mapping :</p><p>\r\n			</p><p>http://en.wikipedia.org/wiki/Object-relational_mapping</p><p>\r\n			</p><p>什麽地方有 ORM ?就是大家常用的.</p><p>\r\n			</p><p>CAKE PHP</p><p>\r\n			</p><p>ZEND FRAMEWORK.</p><p>\r\n			</p><p>Doctrine</p><p>\r\n			</p><p>Propel</p><p>\r\n			</p><p>CoughPHP</p><p>\r\n			</p><p>Symphony</p><p>\r\n			</p><p>当然…您也可以自己写, 重点是, 要懂得怎麽有效率的去管理你的存取层的逻辑.</p><p>\r\n			</p><p>而一但定义了这一层.</p><p>\r\n			</p><p>强烈建议在接下来的 Content Logic Layer , Presentation Logic Layer 严格禁止其它逻辑层的逻辑跳过它来存取资料库.</p><p>\r\n			</p><p>这麽做有什麽好处? :</p><p>\r\n			</p><p>1.确保其它工作者不会写出不良的DB存取逻辑造成你的系统不好维护</p><p>\r\n			</p><p>2.你可以不用再担心会有严重的存取层 BUG</p><p>\r\n			</p><p>3.它在使用上变的更安全, 不会让你的资料库暴露在 Content &amp; Presentation Logic Layer ,让你的 DB 有一定程度的保障.</p><p>\r\n			</p><p>4.如果你的 ORM TOOL 有提供管理器, 你还可以把所有的 SQL 语法倒出来检示有没有什麽存取过重的语法.</p><p>\r\n			</p><p>5.最重要的!!你可以把常用的存取层资料跟 MEMCACHE 做有效的资源管理, 让你的 DB 的资源更有效的被利用!!</p><p>\r\n			</p><p>补充说明:</p><p>\r\n			</p><p>Access MYSQL :资料库的新增改查逻辑全部放在这.</p><p>\r\n			</p><p>Access Memcache :与 MEMCACHE 存取的新增改查逻辑全部放在这.</p><p>\r\n			</p><p>Access NOSQL :现在最流行的 NOSQL ,你可以分别的去包装你要的逻辑在这裡面.</p><p>\r\n			</p><p>Other :如果你有别的使用资料存取的逻辑, 可以参造上述的方式一一的去整理….</p><p>\r\n			</p><h4>2. 逻辑层 :</h4><p>\r\n			</p><p>这一层有什麽东西?</p><p>\r\n			</p><p>1.你们服务用的到的商业逻辑, 你可以把每个商业逻辑用 OOP 设计, 并且放在这一块, 以利日后的管理.</p><p>\r\n			</p><p>2. String Parser :</p><p>\r\n			</p><h4>为什麽在这篇教程裡我会建议您设计这块? 因为它必需满足 Presentation Layer 要求的几个素求:</h4><p>\r\n			</p><p>1.一致性高,2.可重覆利用性高, 3.跨平台性高,4.云端应用, 所以大家不要关掉文章快点看到3.怎麽让你的系统可以符合这四个素求.</p><p>\r\n			</p><h4>3.表示层:</h4><p>\r\n			</p><p>我为何在这篇教程裡, 放入了这一层的应用?</p><p>\r\n			<img src="images/detailed_03.png" alt=""/>\r\n			</p><p>这要回顾到10年前, 我入手了一本 Wrox 的 Professional PHP4.</p><p>\r\n			</p><p>这本书我印象深刻, 因为它一共有十一个作者在写: 当时看到它有一篇单元 “多层式架构开发” ,让我对整个 WEB 架构开发的视野完全打开.不过我得承认我以前很嘴贱, 常说 SMARTY TEMPLATE 是玩具.</p><p>\r\n			</p><p>PS : SMARTY TEMPLATE 采用 tpl php var 的方式来做少了这一层,常会极端的用些言语说它不好.</p><p>\r\n			</p><p>你可以参考这二本书, 会发现这一层放入这个设计会让你未来工作变的轻松很多.</p><p>\r\n			</p><p>http://www.amazon.com/Profession … homas/dp/1861006918</p><p>\r\n			</p><p>http://www.amazon.com/Profession … p;keywords=PHP4+XML</p><p>\r\n			</p><p>#回到正题-</p><p>\r\n			</p><p>这一层专门用来处理 Content Logic Layer 处理好的资料, 利用 XML , JSON 等标准化的介面语言, 来规范你的 Content Logic Layer 按照你的 Convention (规范)来吐出资料给 Presentation Logic Layer</p><p>\r\n			</p><p>a.这样做有什麽好处：</p><p>\r\n			</p><h4>1.一致性高:</h4><p>\r\n			</p><p>也因为这样, 你的 Presentation Layer 有著标准化的格式, 所以你在使用 AJAX , AS , PHP SDK 等…做画面逻辑串接时,你的画面逻辑的程序将会变的一致性很高, 因为都是参考同样的格式, 让你的画面逻辑的程序不会乱长.工程师因为熟悉相同的介面格式, 工作起来将会非常的轻松.</p><p>\r\n			</p><h4>2.可重覆利用性高:</h4><p>\r\n			</p><p>在你享受 Presentation Layer 有著标准化的格式的好处时, 你会发现,你可以把画面逻辑也整理起来重覆利用,这时你会发现你少写好多好多的程序码.例如: 换页逻辑, 表单的呈现………..等等等, 只要另外塞 CSS 进来就好了. 根本不用写什麽程序.</p><p>\r\n			</p><h4>3.跨平台性高:</h4><p>\r\n			</p><p>啥咪?还有.是的!!!大家记得 RSS 吗? RSS就是利用了 Presentation Layer 这个特性让各种平台都可以串接 BLOG 的文章内容, 让你的系统有著强大的夸平台性整合能力.</p><p>\r\n			</p><h4>4.云端应用:</h4><p>\r\n			</p><p>是的即然跨平台性高了, 也就是你完成这个需求的同时, 你所有的系统内容的呈现可以丢给任何云端平台的整合!</p><p>\r\n			</p><h4>b.使用心得：</h4><p>\r\n			</p><p>这个设计, 会让你的系统架构非常灵活, 灵活到什麽程度?</p><p>\r\n			</p><p>以往一组新增/修改/删除/换页/搜寻, 只要写完一次而且完整的从下到上每一层整合上来.\r\n \r\n			我几乎不用二次开发, 直接套用之前写好的 content Logic , Presentation Logic 就可以完成一个需求.\r\n \r\n			一天可以完工三十几组新增/修改/删除/换页/搜寻的串接, 所以我当时消耗需求的速度比起一般没有用这个设计技巧快上非常的多. \r\n			而大家心裡会有疑问, 这不就是以前 RUBY &amp; CAKE PHP 的特性吗?是的!!就这个理念!\r\n \r\n			不过有差异, 就是 CAKE PHP 在做画面逻辑时, 它并不会真的把这层切开, 而是将 MVC 裡的 V 和 C 有效化的重覆利用, 但是一但要使用云端应用和夸平台时,</p><p>\r\n			</p><p>之前写过的程序无法直接透过 Presentation Layer 拉出去给第三方平台做串接.</p><p>\r\n			</p><p>虽然省了 ORM 那一层的重覆开发, 但是 Content Layer 和 Presentation Layer 还是要在手工调整的.\r\n \r\n			而一但一调整, 就会产生, DEBUG ,开发, 稳定性, 和你又多了一堆CODE 要维护的工作….</p><p>\r\n			</p><h4>6. 表现逻辑层 :</h4><p>\r\n			</p><p>这一层讲起来轻松多了, 因为大家己经有了非常多的 AJAX , XSL , FACEBOOK SDK , IOS , ANDROID , FLASH AS 的串接经验.\r\n \r\n			没错, 这裡就是把之前辛苦定义并且做好的 Presentation Layer 吐出来的格式做应用.</p><p>\r\n			</p><p>你可以透过~HTTP , SOCKET SERVER 等等..将你的 Presentation Layer 的 JSON , XML 吐出来, 并且交给你的画面逻辑程序去串接.\r\n			这麽一来你也轻松完成了一个云端的整合介面, 让你写的 PHP 可以广泛的使用在任何不同的平台上.</p>', '2019/04/155589667798504.jpg', '2019-04/22/155589667798504.jpg', '1555298686');

-- --------------------------------------------------------

--
-- 表的结构 `wd_partner`
--

CREATE TABLE IF NOT EXISTS `wd_partner` (
  `p_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `p_title` varchar(12) NOT NULL COMMENT '标题',
  `p_img` varchar(64) NOT NULL COMMENT '图片',
  `p_thumb` varchar(100) NOT NULL,
  `p_link` varchar(64) NOT NULL COMMENT '链接',
  PRIMARY KEY (`p_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COMMENT='合作伙伴测试' AUTO_INCREMENT=13 ;

--
-- 转存表中的数据 `wd_partner`
--

INSERT INTO `wd_partner` (`p_id`, `p_title`, `p_img`, `p_thumb`, `p_link`) VALUES
(1, '中国移动', '2019/04/155589546141433.jpg', '2019-04/22/155589546141433.jpg', 'www.100086.com'),
(2, '腾讯网', '2019/04/155589547743194.jpg', '2019-04/22/155589547743194.jpg', 'http://www.qq.com'),
(3, '百度', '2019/04/155589548555258.jpg', '2019-04/22/155589548555258.jpg', 'http://www.baidu.com'),
(4, '中国特产', '2019/04/155589549656127.jpg', '2019-04/22/155589549656127.jpg', 'www.baidu.com'),
(5, '哈尔滨地铁', '2019/04/155589550769393.jpg', '2019-04/22/155589550769393.jpg', 'www.baidu.com'),
(6, '凤凰网', '2019/04/155589551851687.jpg', '2019-04/22/155589551851687.jpg', 'www.baidu.com'),
(7, '万达广场', '2019/04/155589554259423.jpg', '2019-04/22/155589554259423.jpg', 'www.baidu.com'),
(8, '海尔', '2019/04/155589555389871.jpg', '2019-04/22/155589555389871.jpg', 'www.baidu.com'),
(9, '中国国旅', '2019/04/155589556482073.jpg', '2019-04/22/155589556482073.jpg', 'www.baidu.com'),
(10, '亲亲网', '2019/04/155589557736862.jpg', '2019-04/22/155589557736862.jpg', 'www.baidu.com'),
(11, '居然之家', '2019/04/155589558619714.jpg', '2019-04/22/155589558619714.jpg', 'www.baidu.com'),
(12, '中国联通', '2019/04/155589561670062.jpg', '2019-04/22/155589561670062.jpg', 'www.100010.com');

-- --------------------------------------------------------

--
-- 表的结构 `wd_service`
--

CREATE TABLE IF NOT EXISTS `wd_service` (
  `s_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `s_title` varchar(32) NOT NULL COMMENT '标题',
  `s_img1` varchar(64) NOT NULL COMMENT '图片',
  `s_img2` varchar(64) NOT NULL COMMENT '图片',
  PRIMARY KEY (`s_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COMMENT='服务项目' AUTO_INCREMENT=7 ;

--
-- 转存表中的数据 `wd_service`
--

INSERT INTO `wd_service` (`s_id`, `s_title`, `s_img1`, `s_img2`) VALUES
(1, '高品质网站<br>解决方案', 'images/server_01.jpg', 'images/server_01.gif'),
(2, '电子商务平台<br>解决方案', 'images/server_02.jpg', 'images/server_02.gif'),
(3, 'PHP网站开发人才<br>解决方案', 'images/server_03.jpg', 'images/server_03.gif'),
(4, '网站创意设计<br>解决方案', 'images/server_04.jpg', 'images/server_04.gif'),
(5, '微信应用公众号开发<br>解决方案', 'images/server_05.jpg', 'images/server_05.gif'),
(6, '移动端应用APP开发<br>解决方案', 'images/server_06.jpg', 'images/server_06.gif');

-- --------------------------------------------------------

--
-- 表的结构 `wd_user`
--

CREATE TABLE IF NOT EXISTS `wd_user` (
  `u_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `u_name` varchar(30) DEFAULT NULL,
  `u_password` varchar(32) DEFAULT NULL,
  `u_sex` tinyint(4) DEFAULT NULL,
  `u_phone` varchar(20) DEFAULT NULL,
  `u_email` varchar(100) DEFAULT NULL,
  `u_birthday` varchar(20) DEFAULT NULL,
  `u_photo1` varchar(100) DEFAULT NULL,
  `u_photo2` varchar(100) DEFAULT NULL,
  `u_real` varchar(20) DEFAULT NULL,
  `lasttime` varchar(30) NOT NULL,
  PRIMARY KEY (`u_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COMMENT='用户表' AUTO_INCREMENT=33 ;

--
-- 转存表中的数据 `wd_user`
--

INSERT INTO `wd_user` (`u_id`, `u_name`, `u_password`, `u_sex`, `u_phone`, `u_email`, `u_birthday`, `u_photo1`, `u_photo2`, `u_real`, `lasttime`) VALUES
(25, 'ssss', '81dc9bdb52d04dc20036dbd8313ed05', 0, '123', 'asd', '2019-04-25', NULL, NULL, '355', '1556193461'),
(26, '1234', 'd41d8cd98f00b204e9800998ecf8427e', NULL, NULL, NULL, NULL, NULL, NULL, NULL, '1556242933'),
(22, 'admin', 'e034fb6b66aacc1d48f445ddfb08da98', 0, '', '', '2019-04-26', NULL, NULL, '', '1556242542'),
(27, 'sdasd', '3bad6af0fa4b8b330d162e19938ee981', 0, 'asad', 'ss', 'NaN-NaN-NaN', '2019/04/155628094369879.jpg', '2019-04/26/155628094369879.jpg', '', '1556242542'),
(32, '1234s', '8f60c8102d29fcd525162d02eed4566b', 0, '33', '2', '2019-04-27', '2019/04/15562954721095.jpg', '2019-04/27/15562954721095.jpg', '', '');

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
